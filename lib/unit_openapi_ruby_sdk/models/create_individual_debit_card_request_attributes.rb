=begin
#Unit OpenAPI specifications

#An OpenAPI specifications for unit-sdk clients

The version of the OpenAPI document: 0.2.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module UnitOpenapiRubySdk
  class CreateIndividualDebitCardRequestAttributes
    attr_accessor :shipping_address

    attr_accessor :design

    attr_accessor :tags

    attr_accessor :limits

    attr_accessor :idempotency_key

    attr_accessor :bin

    attr_accessor :card_qualifier

    attr_accessor :card_design_id

    attr_accessor :additional_embossed_text

    attr_accessor :active_for_online_use

    attr_accessor :print_only_business_name

    attr_accessor :expiry_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'shipping_address' => :'shippingAddress',
        :'design' => :'design',
        :'tags' => :'tags',
        :'limits' => :'limits',
        :'idempotency_key' => :'idempotencyKey',
        :'bin' => :'bin',
        :'card_qualifier' => :'cardQualifier',
        :'card_design_id' => :'cardDesignId',
        :'additional_embossed_text' => :'additionalEmbossedText',
        :'active_for_online_use' => :'activeForOnlineUse',
        :'print_only_business_name' => :'printOnlyBusinessName',
        :'expiry_date' => :'expiryDate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'shipping_address' => :'Address',
        :'design' => :'String',
        :'tags' => :'Hash<String, String>',
        :'limits' => :'CardLevelLimits',
        :'idempotency_key' => :'String',
        :'bin' => :'Bin',
        :'card_qualifier' => :'String',
        :'card_design_id' => :'String',
        :'additional_embossed_text' => :'String',
        :'active_for_online_use' => :'Boolean',
        :'print_only_business_name' => :'Boolean',
        :'expiry_date' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UnitOpenapiRubySdk::CreateIndividualDebitCardRequestAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UnitOpenapiRubySdk::CreateIndividualDebitCardRequestAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'shipping_address')
        self.shipping_address = attributes[:'shipping_address']
      end

      if attributes.key?(:'design')
        self.design = attributes[:'design']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Hash)
          self.tags = value
        end
      end

      if attributes.key?(:'limits')
        self.limits = attributes[:'limits']
      end

      if attributes.key?(:'idempotency_key')
        self.idempotency_key = attributes[:'idempotency_key']
      end

      if attributes.key?(:'bin')
        self.bin = attributes[:'bin']
      end

      if attributes.key?(:'card_qualifier')
        self.card_qualifier = attributes[:'card_qualifier']
      end

      if attributes.key?(:'card_design_id')
        self.card_design_id = attributes[:'card_design_id']
      end

      if attributes.key?(:'additional_embossed_text')
        self.additional_embossed_text = attributes[:'additional_embossed_text']
      end

      if attributes.key?(:'active_for_online_use')
        self.active_for_online_use = attributes[:'active_for_online_use']
      end

      if attributes.key?(:'print_only_business_name')
        self.print_only_business_name = attributes[:'print_only_business_name']
      end

      if attributes.key?(:'expiry_date')
        self.expiry_date = attributes[:'expiry_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@tags.nil? && @tags.length > 15
        invalid_properties.push('invalid value for "tags", number of items must be less than or equal to 15.')
      end

      if !@idempotency_key.nil? && @idempotency_key.to_s.length > 255
        invalid_properties.push('invalid value for "idempotency_key", the character length must be smaller than or equal to 255.')
      end

      if !@idempotency_key.nil? && @idempotency_key.to_s.length < 1
        invalid_properties.push('invalid value for "idempotency_key", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^(\d{3})|([ ]{3})$/)
      if !@card_qualifier.nil? && @card_qualifier !~ pattern
        invalid_properties.push("invalid value for \"card_qualifier\", must conform to the pattern #{pattern}.")
      end

      if !@card_design_id.nil? && @card_design_id.to_s.length > 16
        invalid_properties.push('invalid value for "card_design_id", the character length must be smaller than or equal to 16.')
      end

      if !@additional_embossed_text.nil? && @additional_embossed_text.to_s.length > 26
        invalid_properties.push('invalid value for "additional_embossed_text", the character length must be smaller than or equal to 26.')
      end

      pattern = Regexp.new(/^(1[0-2]|0[1-9])\/(\d{2})$|^(\d{4})-(1[0-2]|0[1-9])$|^(\d{2})-(1[0-2]|0[1-9])$/)
      if !@expiry_date.nil? && @expiry_date !~ pattern
        invalid_properties.push("invalid value for \"expiry_date\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@tags.nil? && @tags.length > 15
      return false if !@idempotency_key.nil? && @idempotency_key.to_s.length > 255
      return false if !@idempotency_key.nil? && @idempotency_key.to_s.length < 1
      return false if !@card_qualifier.nil? && @card_qualifier !~ Regexp.new(/^(\d{3})|([ ]{3})$/)
      return false if !@card_design_id.nil? && @card_design_id.to_s.length > 16
      return false if !@additional_embossed_text.nil? && @additional_embossed_text.to_s.length > 26
      return false if !@expiry_date.nil? && @expiry_date !~ Regexp.new(/^(1[0-2]|0[1-9])\/(\d{2})$|^(\d{4})-(1[0-2]|0[1-9])$|^(\d{2})-(1[0-2]|0[1-9])$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tags Value to be assigned
    def tags=(tags)
      if tags.nil?
        fail ArgumentError, 'tags cannot be nil'
      end

      if tags.length > 15
        fail ArgumentError, 'invalid value for "tags", number of items must be less than or equal to 15.'
      end

      @tags = tags
    end

    # Custom attribute writer method with validation
    # @param [Object] idempotency_key Value to be assigned
    def idempotency_key=(idempotency_key)
      if idempotency_key.nil?
        fail ArgumentError, 'idempotency_key cannot be nil'
      end

      if idempotency_key.to_s.length > 255
        fail ArgumentError, 'invalid value for "idempotency_key", the character length must be smaller than or equal to 255.'
      end

      if idempotency_key.to_s.length < 1
        fail ArgumentError, 'invalid value for "idempotency_key", the character length must be great than or equal to 1.'
      end

      @idempotency_key = idempotency_key
    end

    # Custom attribute writer method with validation
    # @param [Object] card_qualifier Value to be assigned
    def card_qualifier=(card_qualifier)
      if card_qualifier.nil?
        fail ArgumentError, 'card_qualifier cannot be nil'
      end

      pattern = Regexp.new(/^(\d{3})|([ ]{3})$/)
      if card_qualifier !~ pattern
        fail ArgumentError, "invalid value for \"card_qualifier\", must conform to the pattern #{pattern}."
      end

      @card_qualifier = card_qualifier
    end

    # Custom attribute writer method with validation
    # @param [Object] card_design_id Value to be assigned
    def card_design_id=(card_design_id)
      if card_design_id.nil?
        fail ArgumentError, 'card_design_id cannot be nil'
      end

      if card_design_id.to_s.length > 16
        fail ArgumentError, 'invalid value for "card_design_id", the character length must be smaller than or equal to 16.'
      end

      @card_design_id = card_design_id
    end

    # Custom attribute writer method with validation
    # @param [Object] additional_embossed_text Value to be assigned
    def additional_embossed_text=(additional_embossed_text)
      if additional_embossed_text.nil?
        fail ArgumentError, 'additional_embossed_text cannot be nil'
      end

      if additional_embossed_text.to_s.length > 26
        fail ArgumentError, 'invalid value for "additional_embossed_text", the character length must be smaller than or equal to 26.'
      end

      @additional_embossed_text = additional_embossed_text
    end

    # Custom attribute writer method with validation
    # @param [Object] expiry_date Value to be assigned
    def expiry_date=(expiry_date)
      if expiry_date.nil?
        fail ArgumentError, 'expiry_date cannot be nil'
      end

      pattern = Regexp.new(/^(1[0-2]|0[1-9])\/(\d{2})$|^(\d{4})-(1[0-2]|0[1-9])$|^(\d{2})-(1[0-2]|0[1-9])$/)
      if expiry_date !~ pattern
        fail ArgumentError, "invalid value for \"expiry_date\", must conform to the pattern #{pattern}."
      end

      @expiry_date = expiry_date
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          shipping_address == o.shipping_address &&
          design == o.design &&
          tags == o.tags &&
          limits == o.limits &&
          idempotency_key == o.idempotency_key &&
          bin == o.bin &&
          card_qualifier == o.card_qualifier &&
          card_design_id == o.card_design_id &&
          additional_embossed_text == o.additional_embossed_text &&
          active_for_online_use == o.active_for_online_use &&
          print_only_business_name == o.print_only_business_name &&
          expiry_date == o.expiry_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [shipping_address, design, tags, limits, idempotency_key, bin, card_qualifier, card_design_id, additional_embossed_text, active_for_online_use, print_only_business_name, expiry_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UnitOpenapiRubySdk.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
