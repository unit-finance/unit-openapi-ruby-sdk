=begin
#Unit OpenAPI specifications

#An OpenAPI specifications for unit-sdk clients

The version of the OpenAPI document: 0.2.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module UnitOpenapiRubySdk
  class PurchaseAuthorizationAllOfAttributes
    attr_accessor :created_at

    attr_accessor :amount

    attr_accessor :status

    attr_accessor :partial_approval_allowed

    attr_accessor :approved_amount

    attr_accessor :decline_reason

    attr_accessor :merchant

    attr_accessor :recurring

    attr_accessor :tags

    attr_accessor :healthcare_amounts

    attr_accessor :payment_method

    attr_accessor :digital_wallet

    attr_accessor :card_verification_data

    attr_accessor :ecommerce

    attr_accessor :card_present

    attr_accessor :card_network

    attr_accessor :cash_withdrawal_amount

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created_at' => :'createdAt',
        :'amount' => :'amount',
        :'status' => :'status',
        :'partial_approval_allowed' => :'partialApprovalAllowed',
        :'approved_amount' => :'approvedAmount',
        :'decline_reason' => :'declineReason',
        :'merchant' => :'merchant',
        :'recurring' => :'recurring',
        :'tags' => :'tags',
        :'healthcare_amounts' => :'healthcareAmounts',
        :'payment_method' => :'paymentMethod',
        :'digital_wallet' => :'digitalWallet',
        :'card_verification_data' => :'cardVerificationData',
        :'ecommerce' => :'ecommerce',
        :'card_present' => :'cardPresent',
        :'card_network' => :'cardNetwork',
        :'cash_withdrawal_amount' => :'cashWithdrawalAmount'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'created_at' => :'Time',
        :'amount' => :'Integer',
        :'status' => :'String',
        :'partial_approval_allowed' => :'Boolean',
        :'approved_amount' => :'Integer',
        :'decline_reason' => :'String',
        :'merchant' => :'Merchant',
        :'recurring' => :'Boolean',
        :'tags' => :'Hash<String, String>',
        :'healthcare_amounts' => :'HealthcareAmounts',
        :'payment_method' => :'String',
        :'digital_wallet' => :'String',
        :'card_verification_data' => :'CardVerificationData',
        :'ecommerce' => :'Boolean',
        :'card_present' => :'Boolean',
        :'card_network' => :'String',
        :'cash_withdrawal_amount' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UnitOpenapiRubySdk::PurchaseAuthorizationAllOfAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UnitOpenapiRubySdk::PurchaseAuthorizationAllOfAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      else
        self.amount = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'partial_approval_allowed')
        self.partial_approval_allowed = attributes[:'partial_approval_allowed']
      else
        self.partial_approval_allowed = nil
      end

      if attributes.key?(:'approved_amount')
        self.approved_amount = attributes[:'approved_amount']
      end

      if attributes.key?(:'decline_reason')
        self.decline_reason = attributes[:'decline_reason']
      end

      if attributes.key?(:'merchant')
        self.merchant = attributes[:'merchant']
      else
        self.merchant = nil
      end

      if attributes.key?(:'recurring')
        self.recurring = attributes[:'recurring']
      else
        self.recurring = nil
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Hash)
          self.tags = value
        end
      end

      if attributes.key?(:'healthcare_amounts')
        self.healthcare_amounts = attributes[:'healthcare_amounts']
      end

      if attributes.key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      end

      if attributes.key?(:'digital_wallet')
        self.digital_wallet = attributes[:'digital_wallet']
      end

      if attributes.key?(:'card_verification_data')
        self.card_verification_data = attributes[:'card_verification_data']
      end

      if attributes.key?(:'ecommerce')
        self.ecommerce = attributes[:'ecommerce']
      end

      if attributes.key?(:'card_present')
        self.card_present = attributes[:'card_present']
      end

      if attributes.key?(:'card_network')
        self.card_network = attributes[:'card_network']
      end

      if attributes.key?(:'cash_withdrawal_amount')
        self.cash_withdrawal_amount = attributes[:'cash_withdrawal_amount']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @partial_approval_allowed.nil?
        invalid_properties.push('invalid value for "partial_approval_allowed", partial_approval_allowed cannot be nil.')
      end

      if @merchant.nil?
        invalid_properties.push('invalid value for "merchant", merchant cannot be nil.')
      end

      if @recurring.nil?
        invalid_properties.push('invalid value for "recurring", recurring cannot be nil.')
      end

      if !@tags.nil? && @tags.length > 15
        invalid_properties.push('invalid value for "tags", number of items must be less than or equal to 15.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @created_at.nil?
      return false if @amount.nil?
      return false if @status.nil?
      return false if @partial_approval_allowed.nil?
      return false if @merchant.nil?
      return false if @recurring.nil?
      return false if !@tags.nil? && @tags.length > 15
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tags Value to be assigned
    def tags=(tags)
      if tags.nil?
        fail ArgumentError, 'tags cannot be nil'
      end

      if tags.length > 15
        fail ArgumentError, 'invalid value for "tags", number of items must be less than or equal to 15.'
      end

      @tags = tags
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_at == o.created_at &&
          amount == o.amount &&
          status == o.status &&
          partial_approval_allowed == o.partial_approval_allowed &&
          approved_amount == o.approved_amount &&
          decline_reason == o.decline_reason &&
          merchant == o.merchant &&
          recurring == o.recurring &&
          tags == o.tags &&
          healthcare_amounts == o.healthcare_amounts &&
          payment_method == o.payment_method &&
          digital_wallet == o.digital_wallet &&
          card_verification_data == o.card_verification_data &&
          ecommerce == o.ecommerce &&
          card_present == o.card_present &&
          card_network == o.card_network &&
          cash_withdrawal_amount == o.cash_withdrawal_amount
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [created_at, amount, status, partial_approval_allowed, approved_amount, decline_reason, merchant, recurring, tags, healthcare_amounts, payment_method, digital_wallet, card_verification_data, ecommerce, card_present, card_network, cash_withdrawal_amount].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = UnitOpenapiRubySdk.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
