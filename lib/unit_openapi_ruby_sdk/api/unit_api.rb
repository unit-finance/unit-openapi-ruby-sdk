=begin
#Unit OpenAPI specifications

#An OpenAPI specifications for unit-sdk clients

The version of the OpenAPI document: 0.2.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module UnitOpenapiRubySdk
  class UnitApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Atm Deposit Simulation
    # Activate Card Simulation via API
    # @param card_id [String] ID of the card to activate
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def activate_card_simulation(card_id, opts = {})
      activate_card_simulation_with_http_info(card_id, opts)
      nil
    end

    # Create Atm Deposit Simulation
    # Activate Card Simulation via API
    # @param card_id [String] ID of the card to activate
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def activate_card_simulation_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.activate_card_simulation ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling UnitApi.activate_card_simulation"
      end
      # resource path
      local_var_path = '/sandbox/cards/{cardId}/activate'.sub('{' + 'cardId' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.activate_card_simulation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#activate_card_simulation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate Account Control Agreement by Id
    # Activate Control Agreement for Account via API 
    # @param account_id [String] ID of the account
    # @param [Hash] opts the optional parameters
    # @return [UnitAccountResponse]
    def activate_control_agreement_for_account(account_id, opts = {})
      data, _status_code, _headers = activate_control_agreement_for_account_with_http_info(account_id, opts)
      data
    end

    # Activate Account Control Agreement by Id
    # Activate Control Agreement for Account via API 
    # @param account_id [String] ID of the account
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitAccountResponse, Integer, Hash)>] UnitAccountResponse data, response status code and response headers
    def activate_control_agreement_for_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.activate_control_agreement_for_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.activate_control_agreement_for_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/activate-daca'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.activate_control_agreement_for_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#activate_control_agreement_for_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Owners to Account by Id
    # Add Owners to Account via API 
    # @param account_id [String] ID of the account to add owners to
    # @param add_account_owners_request [AddAccountOwnersRequest] Add Account Owners Request
    # @param [Hash] opts the optional parameters
    # @return [UnitDepositAccountResponse]
    def add_account_owners(account_id, add_account_owners_request, opts = {})
      data, _status_code, _headers = add_account_owners_with_http_info(account_id, add_account_owners_request, opts)
      data
    end

    # Add Owners to Account by Id
    # Add Owners to Account via API 
    # @param account_id [String] ID of the account to add owners to
    # @param add_account_owners_request [AddAccountOwnersRequest] Add Account Owners Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitDepositAccountResponse, Integer, Hash)>] UnitDepositAccountResponse data, response status code and response headers
    def add_account_owners_with_http_info(account_id, add_account_owners_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.add_account_owners ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.add_account_owners"
      end
      # verify the required parameter 'add_account_owners_request' is set
      if @api_client.config.client_side_validation && add_account_owners_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_account_owners_request' when calling UnitApi.add_account_owners"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/relationships/customers'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_account_owners_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitDepositAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.add_account_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#add_account_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Authorized Users by Id
    # Add Authorized Users via API
    # @param customer_id [String] ID of the customer to add authorized users to
    # @param add_authorized_users_request [AddAuthorizedUsersRequest] Add Authorized Users Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCustomerResponse]
    def add_authorized_users(customer_id, add_authorized_users_request, opts = {})
      data, _status_code, _headers = add_authorized_users_with_http_info(customer_id, add_authorized_users_request, opts)
      data
    end

    # Add Authorized Users by Id
    # Add Authorized Users via API
    # @param customer_id [String] ID of the customer to add authorized users to
    # @param add_authorized_users_request [AddAuthorizedUsersRequest] Add Authorized Users Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCustomerResponse, Integer, Hash)>] UnitCustomerResponse data, response status code and response headers
    def add_authorized_users_with_http_info(customer_id, add_authorized_users_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.add_authorized_users ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UnitApi.add_authorized_users"
      end
      # verify the required parameter 'add_authorized_users_request' is set
      if @api_client.config.client_side_validation && add_authorized_users_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_authorized_users_request' when calling UnitApi.add_authorized_users"
      end
      # resource path
      local_var_path = '/customers/{customerId}/authorized-users'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_authorized_users_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCustomerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.add_authorized_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#add_authorized_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Advance Received Payment by Id
    # Advance a Received Payment via API 
    # @param payment_id [String] ID of the payment to advance
    # @param [Hash] opts the optional parameters
    # @return [UnitReceivedPaymentResponse]
    def advance_received_payment(payment_id, opts = {})
      data, _status_code, _headers = advance_received_payment_with_http_info(payment_id, opts)
      data
    end

    # Advance Received Payment by Id
    # Advance a Received Payment via API 
    # @param payment_id [String] ID of the payment to advance
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitReceivedPaymentResponse, Integer, Hash)>] UnitReceivedPaymentResponse data, response status code and response headers
    def advance_received_payment_with_http_info(payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.advance_received_payment ...'
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling UnitApi.advance_received_payment"
      end
      # resource path
      local_var_path = '/received-payments/{paymentId}/advance'.sub('{' + 'paymentId' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitReceivedPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.advance_received_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#advance_received_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Approve Authorization Request by Id
    # Approve a Authorization Request via API 
    # @param authorization_id [String] ID of the authorization request to approve
    # @param approve_authorization_request [ApproveAuthorizationRequest] Approve Authorization Request
    # @param [Hash] opts the optional parameters
    # @return [UnitAuthorizationRequestResponse]
    def approve_authorization_request(authorization_id, approve_authorization_request, opts = {})
      data, _status_code, _headers = approve_authorization_request_with_http_info(authorization_id, approve_authorization_request, opts)
      data
    end

    # Approve Authorization Request by Id
    # Approve a Authorization Request via API 
    # @param authorization_id [String] ID of the authorization request to approve
    # @param approve_authorization_request [ApproveAuthorizationRequest] Approve Authorization Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitAuthorizationRequestResponse, Integer, Hash)>] UnitAuthorizationRequestResponse data, response status code and response headers
    def approve_authorization_request_with_http_info(authorization_id, approve_authorization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.approve_authorization_request ...'
      end
      # verify the required parameter 'authorization_id' is set
      if @api_client.config.client_side_validation && authorization_id.nil?
        fail ArgumentError, "Missing the required parameter 'authorization_id' when calling UnitApi.approve_authorization_request"
      end
      # verify the required parameter 'approve_authorization_request' is set
      if @api_client.config.client_side_validation && approve_authorization_request.nil?
        fail ArgumentError, "Missing the required parameter 'approve_authorization_request' when calling UnitApi.approve_authorization_request"
      end
      # resource path
      local_var_path = '/authorization-requests/{authorizationId}/approve'.sub('{' + 'authorizationId' + '}', CGI.escape(authorization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(approve_authorization_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAuthorizationRequestResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.approve_authorization_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#approve_authorization_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Approve Check Payment by Id
    # Approve a Check Payment via API 
    # @param check_payment_id [String] ID of the check payment to approve
    # @param approve_check_payment_request [ApproveCheckPaymentRequest] Approve Check Payment Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCheckPaymentResponse]
    def approve_check_payment(check_payment_id, approve_check_payment_request, opts = {})
      data, _status_code, _headers = approve_check_payment_with_http_info(check_payment_id, approve_check_payment_request, opts)
      data
    end

    # Approve Check Payment by Id
    # Approve a Check Payment via API 
    # @param check_payment_id [String] ID of the check payment to approve
    # @param approve_check_payment_request [ApproveCheckPaymentRequest] Approve Check Payment Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCheckPaymentResponse, Integer, Hash)>] UnitCheckPaymentResponse data, response status code and response headers
    def approve_check_payment_with_http_info(check_payment_id, approve_check_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.approve_check_payment ...'
      end
      # verify the required parameter 'check_payment_id' is set
      if @api_client.config.client_side_validation && check_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_payment_id' when calling UnitApi.approve_check_payment"
      end
      # verify the required parameter 'approve_check_payment_request' is set
      if @api_client.config.client_side_validation && approve_check_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'approve_check_payment_request' when calling UnitApi.approve_check_payment"
      end
      # resource path
      local_var_path = '/check-payments/{checkPaymentId}/approve'.sub('{' + 'checkPaymentId' + '}', CGI.escape(check_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(approve_check_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCheckPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.approve_check_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#approve_check_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Archive Customer by Id
    # Archive a Customer via API 
    # @param customer_id [String] ID of the customer to archive
    # @param archive_customer_request [ArchiveCustomerRequest] Archive Customer Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCustomerResponse]
    def archive_customer(customer_id, archive_customer_request, opts = {})
      data, _status_code, _headers = archive_customer_with_http_info(customer_id, archive_customer_request, opts)
      data
    end

    # Archive Customer by Id
    # Archive a Customer via API 
    # @param customer_id [String] ID of the customer to archive
    # @param archive_customer_request [ArchiveCustomerRequest] Archive Customer Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCustomerResponse, Integer, Hash)>] UnitCustomerResponse data, response status code and response headers
    def archive_customer_with_http_info(customer_id, archive_customer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.archive_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UnitApi.archive_customer"
      end
      # verify the required parameter 'archive_customer_request' is set
      if @api_client.config.client_side_validation && archive_customer_request.nil?
        fail ArgumentError, "Missing the required parameter 'archive_customer_request' when calling UnitApi.archive_customer"
      end
      # resource path
      local_var_path = '/customers/{customerId}/archive'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(archive_customer_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCustomerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.archive_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#archive_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel Application by Id
    # Cancel a Application via API 
    # @param application_id [String] ID of the application to get
    # @param cancel_application_request [CancelApplicationRequest] Cancel Application Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCancelApplicationResponse]
    def cancel_application(application_id, cancel_application_request, opts = {})
      data, _status_code, _headers = cancel_application_with_http_info(application_id, cancel_application_request, opts)
      data
    end

    # Cancel Application by Id
    # Cancel a Application via API 
    # @param application_id [String] ID of the application to get
    # @param cancel_application_request [CancelApplicationRequest] Cancel Application Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCancelApplicationResponse, Integer, Hash)>] UnitCancelApplicationResponse data, response status code and response headers
    def cancel_application_with_http_info(application_id, cancel_application_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.cancel_application ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling UnitApi.cancel_application"
      end
      # verify the required parameter 'cancel_application_request' is set
      if @api_client.config.client_side_validation && cancel_application_request.nil?
        fail ArgumentError, "Missing the required parameter 'cancel_application_request' when calling UnitApi.cancel_application"
      end
      # resource path
      local_var_path = '/applications/{applicationId}/cancel'.sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cancel_application_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCancelApplicationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.cancel_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#cancel_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel Check Payment by Id
    # Cancel a Check Payment via API 
    # @param check_payment_id [String] ID of the check payment to cancel
    # @param [Hash] opts the optional parameters
    # @return [UnitCheckPaymentResponse]
    def cancel_check_payment(check_payment_id, opts = {})
      data, _status_code, _headers = cancel_check_payment_with_http_info(check_payment_id, opts)
      data
    end

    # Cancel Check Payment by Id
    # Cancel a Check Payment via API 
    # @param check_payment_id [String] ID of the check payment to cancel
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCheckPaymentResponse, Integer, Hash)>] UnitCheckPaymentResponse data, response status code and response headers
    def cancel_check_payment_with_http_info(check_payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.cancel_check_payment ...'
      end
      # verify the required parameter 'check_payment_id' is set
      if @api_client.config.client_side_validation && check_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_payment_id' when calling UnitApi.cancel_check_payment"
      end
      # resource path
      local_var_path = '/check-payments/{checkPaymentId}/cancel'.sub('{' + 'checkPaymentId' + '}', CGI.escape(check_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCheckPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.cancel_check_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#cancel_check_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a Payment by Id
    # Cancel a Payment via API 
    # @param payment_id [String] ID of the payment to cancel
    # @param body [Object] Pass empty object in order for content-type to be aquired correctly
    # @param [Hash] opts the optional parameters
    # @return [UnitPaymentResponse]
    def cancel_payment(payment_id, body, opts = {})
      data, _status_code, _headers = cancel_payment_with_http_info(payment_id, body, opts)
      data
    end

    # Cancel a Payment by Id
    # Cancel a Payment via API 
    # @param payment_id [String] ID of the payment to cancel
    # @param body [Object] Pass empty object in order for content-type to be aquired correctly
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitPaymentResponse, Integer, Hash)>] UnitPaymentResponse data, response status code and response headers
    def cancel_payment_with_http_info(payment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.cancel_payment ...'
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling UnitApi.cancel_payment"
      end
      # resource path
      local_var_path = '/payments/{paymentId}/cancel'.sub('{' + 'paymentId' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.cancel_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#cancel_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Close an Account by Id
    # Close an Account via API 
    # @param account_id [String] ID of the account to close
    # @param close_account_request [CloseAccountRequest] Close Account Request
    # @param [Hash] opts the optional parameters
    # @return [UnitAccountResponse]
    def close_account(account_id, close_account_request, opts = {})
      data, _status_code, _headers = close_account_with_http_info(account_id, close_account_request, opts)
      data
    end

    # Close an Account by Id
    # Close an Account via API 
    # @param account_id [String] ID of the account to close
    # @param close_account_request [CloseAccountRequest] Close Account Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitAccountResponse, Integer, Hash)>] UnitAccountResponse data, response status code and response headers
    def close_account_with_http_info(account_id, close_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.close_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.close_account"
      end
      # verify the required parameter 'close_account_request' is set
      if @api_client.config.client_side_validation && close_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'close_account_request' when calling UnitApi.close_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/close'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(close_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.close_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#close_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Close a Card
    # Close a Card via API 
    # @param card_id [String] ID of the card to close
    # @param [Hash] opts the optional parameters
    # @return [UnitCardResponse]
    def close_card(card_id, opts = {})
      data, _status_code, _headers = close_card_with_http_info(card_id, opts)
      data
    end

    # Close a Card
    # Close a Card via API 
    # @param card_id [String] ID of the card to close
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCardResponse, Integer, Hash)>] UnitCardResponse data, response status code and response headers
    def close_card_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.close_card ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling UnitApi.close_card"
      end
      # resource path
      local_var_path = '/cards/{cardId}/close'.sub('{' + 'cardId' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.close_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#close_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Confirm by Id
    # Confirm a Check Deposit from API 
    # @param check_deposit_id [String] ID of the check deposit to confirm
    # @param confirm_check_deposit_request [ConfirmCheckDepositRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UnitCheckDepositResponse]
    def confirm_check_deposit(check_deposit_id, confirm_check_deposit_request, opts = {})
      data, _status_code, _headers = confirm_check_deposit_with_http_info(check_deposit_id, confirm_check_deposit_request, opts)
      data
    end

    # Confirm by Id
    # Confirm a Check Deposit from API 
    # @param check_deposit_id [String] ID of the check deposit to confirm
    # @param confirm_check_deposit_request [ConfirmCheckDepositRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCheckDepositResponse, Integer, Hash)>] UnitCheckDepositResponse data, response status code and response headers
    def confirm_check_deposit_with_http_info(check_deposit_id, confirm_check_deposit_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.confirm_check_deposit ...'
      end
      # verify the required parameter 'check_deposit_id' is set
      if @api_client.config.client_side_validation && check_deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_deposit_id' when calling UnitApi.confirm_check_deposit"
      end
      # verify the required parameter 'confirm_check_deposit_request' is set
      if @api_client.config.client_side_validation && confirm_check_deposit_request.nil?
        fail ArgumentError, "Missing the required parameter 'confirm_check_deposit_request' when calling UnitApi.confirm_check_deposit"
      end
      # resource path
      local_var_path = '/check-deposits/{checkDepositId}/confirm'.sub('{' + 'checkDepositId' + '}', CGI.escape(check_deposit_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(confirm_check_deposit_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCheckDepositResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.confirm_check_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#confirm_check_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Account
    # Create Account via API 
    # @param create_account_request [CreateAccountRequest] Create Account Request
    # @param [Hash] opts the optional parameters
    # @return [UnitAccountResponse]
    def create_account(create_account_request, opts = {})
      data, _status_code, _headers = create_account_with_http_info(create_account_request, opts)
      data
    end

    # Create Account
    # Create Account via API 
    # @param create_account_request [CreateAccountRequest] Create Account Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitAccountResponse, Integer, Hash)>] UnitAccountResponse data, response status code and response headers
    def create_account_with_http_info(create_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_account ...'
      end
      # verify the required parameter 'create_account_request' is set
      if @api_client.config.client_side_validation && create_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_account_request' when calling UnitApi.create_account"
      end
      # resource path
      local_var_path = '/accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create ACH Received Payment Transaction Simulation
    # Create ACH Received Payment Transaction Simulation via API 
    # @param create_ach_received_payment_transaction_request [CreateACHReceivedPaymentTransactionRequest] Create ACH Received Payment Transaction Simulation Request
    # @param [Hash] opts the optional parameters
    # @return [UnitReceivedPaymentResponse]
    def create_ach_received_payment_transaction_simulation(create_ach_received_payment_transaction_request, opts = {})
      data, _status_code, _headers = create_ach_received_payment_transaction_simulation_with_http_info(create_ach_received_payment_transaction_request, opts)
      data
    end

    # Create ACH Received Payment Transaction Simulation
    # Create ACH Received Payment Transaction Simulation via API 
    # @param create_ach_received_payment_transaction_request [CreateACHReceivedPaymentTransactionRequest] Create ACH Received Payment Transaction Simulation Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitReceivedPaymentResponse, Integer, Hash)>] UnitReceivedPaymentResponse data, response status code and response headers
    def create_ach_received_payment_transaction_simulation_with_http_info(create_ach_received_payment_transaction_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_ach_received_payment_transaction_simulation ...'
      end
      # verify the required parameter 'create_ach_received_payment_transaction_request' is set
      if @api_client.config.client_side_validation && create_ach_received_payment_transaction_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_ach_received_payment_transaction_request' when calling UnitApi.create_ach_received_payment_transaction_simulation"
      end
      # resource path
      local_var_path = '/sandbox/received-payments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_ach_received_payment_transaction_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitReceivedPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_ach_received_payment_transaction_simulation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_ach_received_payment_transaction_simulation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Org API Token
    # Create an Org API Token via API 
    # @param user_id [String] ID of the user to create token for
    # @param create_api_token_request [CreateApiTokenRequest] Create Org API Token Request
    # @param [Hash] opts the optional parameters
    # @return [UnitApiTokenResponse]
    def create_api_token(user_id, create_api_token_request, opts = {})
      data, _status_code, _headers = create_api_token_with_http_info(user_id, create_api_token_request, opts)
      data
    end

    # Create Org API Token
    # Create an Org API Token via API 
    # @param user_id [String] ID of the user to create token for
    # @param create_api_token_request [CreateApiTokenRequest] Create Org API Token Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitApiTokenResponse, Integer, Hash)>] UnitApiTokenResponse data, response status code and response headers
    def create_api_token_with_http_info(user_id, create_api_token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_api_token ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UnitApi.create_api_token"
      end
      # verify the required parameter 'create_api_token_request' is set
      if @api_client.config.client_side_validation && create_api_token_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_api_token_request' when calling UnitApi.create_api_token"
      end
      # resource path
      local_var_path = '/users/{userId}/api-tokens'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_api_token_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitApiTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_api_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_api_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Application
    # Create an Application via API 
    # @param create_application_request [CreateApplicationRequest] Create Application Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCreateApplicationResponse]
    def create_application(create_application_request, opts = {})
      data, _status_code, _headers = create_application_with_http_info(create_application_request, opts)
      data
    end

    # Create Application
    # Create an Application via API 
    # @param create_application_request [CreateApplicationRequest] Create Application Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCreateApplicationResponse, Integer, Hash)>] UnitCreateApplicationResponse data, response status code and response headers
    def create_application_with_http_info(create_application_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_application ...'
      end
      # verify the required parameter 'create_application_request' is set
      if @api_client.config.client_side_validation && create_application_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_application_request' when calling UnitApi.create_application"
      end
      # resource path
      local_var_path = '/applications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_application_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCreateApplicationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an application document
    # Create an application document via API
    # @param application_id [String] ID of the application to create a file for
    # @param content_type [DefaultContentType] A workaround to properly assign the content type for the request body while providing no body, just set the one possible enum value
    # @param [Hash] opts the optional parameters
    # @return [UnitDocumentResponse]
    def create_application_document(application_id, content_type, opts = {})
      data, _status_code, _headers = create_application_document_with_http_info(application_id, content_type, opts)
      data
    end

    # Create an application document
    # Create an application document via API
    # @param application_id [String] ID of the application to create a file for
    # @param content_type [DefaultContentType] A workaround to properly assign the content type for the request body while providing no body, just set the one possible enum value
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitDocumentResponse, Integer, Hash)>] UnitDocumentResponse data, response status code and response headers
    def create_application_document_with_http_info(application_id, content_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_application_document ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling UnitApi.create_application_document"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling UnitApi.create_application_document"
      end
      # resource path
      local_var_path = '/applications/{applicationId}/documents'.sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      header_params[:'Content-Type'] = content_type

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitDocumentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_application_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_application_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Application Form
    # Create an Application Form via API 
    # @param create_application_form_request [CreateApplicationFormRequest] Create Application Form Request
    # @param [Hash] opts the optional parameters
    # @return [UnitApplicationFormResponse]
    def create_application_form(create_application_form_request, opts = {})
      data, _status_code, _headers = create_application_form_with_http_info(create_application_form_request, opts)
      data
    end

    # Create Application Form
    # Create an Application Form via API 
    # @param create_application_form_request [CreateApplicationFormRequest] Create Application Form Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitApplicationFormResponse, Integer, Hash)>] UnitApplicationFormResponse data, response status code and response headers
    def create_application_form_with_http_info(create_application_form_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_application_form ...'
      end
      # verify the required parameter 'create_application_form_request' is set
      if @api_client.config.client_side_validation && create_application_form_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_application_form_request' when calling UnitApi.create_application_form"
      end
      # resource path
      local_var_path = '/application-forms'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_application_form_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitApplicationFormResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_application_form",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_application_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Atm Deposit Simulation
    # Create Atm Deposit Simulation via API 
    # @param create_atm_deposit_simulation_request [CreateAtmDepositSimulationRequest] Create Atm Deposit Simulation Request
    # @param [Hash] opts the optional parameters
    # @return [UnitDepositAccountResponse]
    def create_atm_deposit_simulation(create_atm_deposit_simulation_request, opts = {})
      data, _status_code, _headers = create_atm_deposit_simulation_with_http_info(create_atm_deposit_simulation_request, opts)
      data
    end

    # Create Atm Deposit Simulation
    # Create Atm Deposit Simulation via API 
    # @param create_atm_deposit_simulation_request [CreateAtmDepositSimulationRequest] Create Atm Deposit Simulation Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitDepositAccountResponse, Integer, Hash)>] UnitDepositAccountResponse data, response status code and response headers
    def create_atm_deposit_simulation_with_http_info(create_atm_deposit_simulation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_atm_deposit_simulation ...'
      end
      # verify the required parameter 'create_atm_deposit_simulation_request' is set
      if @api_client.config.client_side_validation && create_atm_deposit_simulation_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_atm_deposit_simulation_request' when calling UnitApi.create_atm_deposit_simulation"
      end
      # resource path
      local_var_path = '/sandbox/atm-deposits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_atm_deposit_simulation_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitDepositAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_atm_deposit_simulation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_atm_deposit_simulation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Card
    # Create a Card via API 
    # @param create_card_request [CreateCardRequest] Create Card Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCardResponse]
    def create_card(create_card_request, opts = {})
      data, _status_code, _headers = create_card_with_http_info(create_card_request, opts)
      data
    end

    # Create a Card
    # Create a Card via API 
    # @param create_card_request [CreateCardRequest] Create Card Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCardResponse, Integer, Hash)>] UnitCardResponse data, response status code and response headers
    def create_card_with_http_info(create_card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_card ...'
      end
      # verify the required parameter 'create_card_request' is set
      if @api_client.config.client_side_validation && create_card_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_card_request' when calling UnitApi.create_card"
      end
      # resource path
      local_var_path = '/cards'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_card_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Check Deposit
    # Create a Check Deposit via API 
    # @param create_check_deposit_request [CreateCheckDepositRequest] Create Check Deposit Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCheckDepositResponse]
    def create_check_deposit(create_check_deposit_request, opts = {})
      data, _status_code, _headers = create_check_deposit_with_http_info(create_check_deposit_request, opts)
      data
    end

    # Create Check Deposit
    # Create a Check Deposit via API 
    # @param create_check_deposit_request [CreateCheckDepositRequest] Create Check Deposit Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCheckDepositResponse, Integer, Hash)>] UnitCheckDepositResponse data, response status code and response headers
    def create_check_deposit_with_http_info(create_check_deposit_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_check_deposit ...'
      end
      # verify the required parameter 'create_check_deposit_request' is set
      if @api_client.config.client_side_validation && create_check_deposit_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_check_deposit_request' when calling UnitApi.create_check_deposit"
      end
      # resource path
      local_var_path = '/check-deposits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_check_deposit_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCheckDepositResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_check_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_check_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Check Payment
    # Create Check Payment via API 
    # @param create_check_payment_request [CreateCheckPaymentRequest] Create Check Payment Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCheckPaymentResponse]
    def create_check_payment(create_check_payment_request, opts = {})
      data, _status_code, _headers = create_check_payment_with_http_info(create_check_payment_request, opts)
      data
    end

    # Create Check Payment
    # Create Check Payment via API 
    # @param create_check_payment_request [CreateCheckPaymentRequest] Create Check Payment Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCheckPaymentResponse, Integer, Hash)>] UnitCheckPaymentResponse data, response status code and response headers
    def create_check_payment_with_http_info(create_check_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_check_payment ...'
      end
      # verify the required parameter 'create_check_payment_request' is set
      if @api_client.config.client_side_validation && create_check_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_check_payment_request' when calling UnitApi.create_check_payment"
      end
      # resource path
      local_var_path = '/check-payments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_check_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCheckPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_check_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_check_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Counterparty
    # Create a counterparty via API 
    # @param create_counterparty_request [CreateCounterpartyRequest] Create Counterparty Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCounterpartyResponse]
    def create_counterparty(create_counterparty_request, opts = {})
      data, _status_code, _headers = create_counterparty_with_http_info(create_counterparty_request, opts)
      data
    end

    # Create Counterparty
    # Create a counterparty via API 
    # @param create_counterparty_request [CreateCounterpartyRequest] Create Counterparty Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCounterpartyResponse, Integer, Hash)>] UnitCounterpartyResponse data, response status code and response headers
    def create_counterparty_with_http_info(create_counterparty_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_counterparty ...'
      end
      # verify the required parameter 'create_counterparty_request' is set
      if @api_client.config.client_side_validation && create_counterparty_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_counterparty_request' when calling UnitApi.create_counterparty"
      end
      # resource path
      local_var_path = '/counterparties'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_counterparty_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCounterpartyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_counterparty",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_counterparty\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Customer Token
    # Create a Customer Token via API 
    # @param customer_id [String] ID of the customer to create token for
    # @param create_customer_token_request [CreateCustomerTokenRequest] Create Customer Token Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCustomerTokenResponse]
    def create_customer_token(customer_id, create_customer_token_request, opts = {})
      data, _status_code, _headers = create_customer_token_with_http_info(customer_id, create_customer_token_request, opts)
      data
    end

    # Create Customer Token
    # Create a Customer Token via API 
    # @param customer_id [String] ID of the customer to create token for
    # @param create_customer_token_request [CreateCustomerTokenRequest] Create Customer Token Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCustomerTokenResponse, Integer, Hash)>] UnitCustomerTokenResponse data, response status code and response headers
    def create_customer_token_with_http_info(customer_id, create_customer_token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_customer_token ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UnitApi.create_customer_token"
      end
      # verify the required parameter 'create_customer_token_request' is set
      if @api_client.config.client_side_validation && create_customer_token_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_customer_token_request' when calling UnitApi.create_customer_token"
      end
      # resource path
      local_var_path = '/customers/{customerId}/token'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_customer_token_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCustomerTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_customer_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_customer_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Customer Token Verification
    # Create a Customer Token Verification via API 
    # @param customer_id [String] ID of the customer to create token for
    # @param create_customer_token_verification_request [CreateCustomerTokenVerificationRequest] Create Customer Token Verification Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCustomerTokenVerificationResponse]
    def create_customer_token_verification(customer_id, create_customer_token_verification_request, opts = {})
      data, _status_code, _headers = create_customer_token_verification_with_http_info(customer_id, create_customer_token_verification_request, opts)
      data
    end

    # Create Customer Token Verification
    # Create a Customer Token Verification via API 
    # @param customer_id [String] ID of the customer to create token for
    # @param create_customer_token_verification_request [CreateCustomerTokenVerificationRequest] Create Customer Token Verification Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCustomerTokenVerificationResponse, Integer, Hash)>] UnitCustomerTokenVerificationResponse data, response status code and response headers
    def create_customer_token_verification_with_http_info(customer_id, create_customer_token_verification_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_customer_token_verification ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UnitApi.create_customer_token_verification"
      end
      # verify the required parameter 'create_customer_token_verification_request' is set
      if @api_client.config.client_side_validation && create_customer_token_verification_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_customer_token_verification_request' when calling UnitApi.create_customer_token_verification"
      end
      # resource path
      local_var_path = '/customers/{customerId}/token/verification'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_customer_token_verification_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCustomerTokenVerificationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_customer_token_verification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_customer_token_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Fee
    # Create a Fee via API 
    # @param create_fee_request [CreateFeeRequest] Create Fee Request
    # @param [Hash] opts the optional parameters
    # @return [UnitFeeResponse]
    def create_fee(create_fee_request, opts = {})
      data, _status_code, _headers = create_fee_with_http_info(create_fee_request, opts)
      data
    end

    # Create Fee
    # Create a Fee via API 
    # @param create_fee_request [CreateFeeRequest] Create Fee Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitFeeResponse, Integer, Hash)>] UnitFeeResponse data, response status code and response headers
    def create_fee_with_http_info(create_fee_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_fee ...'
      end
      # verify the required parameter 'create_fee_request' is set
      if @api_client.config.client_side_validation && create_fee_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_fee_request' when calling UnitApi.create_fee"
      end
      # resource path
      local_var_path = '/fees'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_fee_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitFeeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_fee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Incoming ACH Payment Simulation
    # Create Incoming ACH Payment Simulation via API 
    # @param create_incoming_ach_payment_request [CreateIncomingAchPaymentRequest] Create Incoming ACH Payment Simulation Request
    # @param [Hash] opts the optional parameters
    # @return [UnitReceivedPaymentResponse]
    def create_incoming_ach_payment_simulation(create_incoming_ach_payment_request, opts = {})
      data, _status_code, _headers = create_incoming_ach_payment_simulation_with_http_info(create_incoming_ach_payment_request, opts)
      data
    end

    # Create Incoming ACH Payment Simulation
    # Create Incoming ACH Payment Simulation via API 
    # @param create_incoming_ach_payment_request [CreateIncomingAchPaymentRequest] Create Incoming ACH Payment Simulation Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitReceivedPaymentResponse, Integer, Hash)>] UnitReceivedPaymentResponse data, response status code and response headers
    def create_incoming_ach_payment_simulation_with_http_info(create_incoming_ach_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_incoming_ach_payment_simulation ...'
      end
      # verify the required parameter 'create_incoming_ach_payment_request' is set
      if @api_client.config.client_side_validation && create_incoming_ach_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_incoming_ach_payment_request' when calling UnitApi.create_incoming_ach_payment_simulation"
      end
      # resource path
      local_var_path = '/sandbox/received-ach-payment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_incoming_ach_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitReceivedPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_incoming_ach_payment_simulation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_incoming_ach_payment_simulation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Payment
    # Create a Payment via API 
    # @param create_payment_request [CreatePaymentRequest] Create Payment Request
    # @param [Hash] opts the optional parameters
    # @return [UnitPaymentResponse]
    def create_payment(create_payment_request, opts = {})
      data, _status_code, _headers = create_payment_with_http_info(create_payment_request, opts)
      data
    end

    # Create a Payment
    # Create a Payment via API 
    # @param create_payment_request [CreatePaymentRequest] Create Payment Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitPaymentResponse, Integer, Hash)>] UnitPaymentResponse data, response status code and response headers
    def create_payment_with_http_info(create_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_payment ...'
      end
      # verify the required parameter 'create_payment_request' is set
      if @api_client.config.client_side_validation && create_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_payment_request' when calling UnitApi.create_payment"
      end
      # resource path
      local_var_path = '/payments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Recurring Payment
    # Create a Recurring Payment via API 
    # @param create_recurring_payment_request [CreateRecurringPaymentRequest] Create Recurring Payment Request
    # @param [Hash] opts the optional parameters
    # @return [UnitRecurringPaymentResponse]
    def create_recurring_payment(create_recurring_payment_request, opts = {})
      data, _status_code, _headers = create_recurring_payment_with_http_info(create_recurring_payment_request, opts)
      data
    end

    # Create Recurring Payment
    # Create a Recurring Payment via API 
    # @param create_recurring_payment_request [CreateRecurringPaymentRequest] Create Recurring Payment Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitRecurringPaymentResponse, Integer, Hash)>] UnitRecurringPaymentResponse data, response status code and response headers
    def create_recurring_payment_with_http_info(create_recurring_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_recurring_payment ...'
      end
      # verify the required parameter 'create_recurring_payment_request' is set
      if @api_client.config.client_side_validation && create_recurring_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_recurring_payment_request' when calling UnitApi.create_recurring_payment"
      end
      # resource path
      local_var_path = '/recurring-payments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_recurring_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRecurringPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_recurring_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_recurring_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Recurring Repayment
    # Create a Recurring Repayment via API
    # @param create_recurring_repayment_request [CreateRecurringRepaymentRequest] Create a Recurring Repayment Request
    # @param [Hash] opts the optional parameters
    # @return [UnitRecurringRepaymentResponse]
    def create_recurring_repayment(create_recurring_repayment_request, opts = {})
      data, _status_code, _headers = create_recurring_repayment_with_http_info(create_recurring_repayment_request, opts)
      data
    end

    # Create a Recurring Repayment
    # Create a Recurring Repayment via API
    # @param create_recurring_repayment_request [CreateRecurringRepaymentRequest] Create a Recurring Repayment Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitRecurringRepaymentResponse, Integer, Hash)>] UnitRecurringRepaymentResponse data, response status code and response headers
    def create_recurring_repayment_with_http_info(create_recurring_repayment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_recurring_repayment ...'
      end
      # verify the required parameter 'create_recurring_repayment_request' is set
      if @api_client.config.client_side_validation && create_recurring_repayment_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_recurring_repayment_request' when calling UnitApi.create_recurring_repayment"
      end
      # resource path
      local_var_path = '/recurring-repayments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_recurring_repayment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRecurringRepaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_recurring_repayment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_recurring_repayment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Repayment
    # Create a Repayment via API 
    # @param create_repayment_request [CreateRepaymentRequest] Create a Repayment Request
    # @param [Hash] opts the optional parameters
    # @return [UnitRepaymentResponse]
    def create_repayment(create_repayment_request, opts = {})
      data, _status_code, _headers = create_repayment_with_http_info(create_repayment_request, opts)
      data
    end

    # Create a Repayment
    # Create a Repayment via API 
    # @param create_repayment_request [CreateRepaymentRequest] Create a Repayment Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitRepaymentResponse, Integer, Hash)>] UnitRepaymentResponse data, response status code and response headers
    def create_repayment_with_http_info(create_repayment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_repayment ...'
      end
      # verify the required parameter 'create_repayment_request' is set
      if @api_client.config.client_side_validation && create_repayment_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_repayment_request' when calling UnitApi.create_repayment"
      end
      # resource path
      local_var_path = '/repayments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_repayment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRepaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_repayment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_repayment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Reward
    # Create a Reward via API 
    # @param create_reward_request [CreateRewardRequest] Create Reward Request
    # @param [Hash] opts the optional parameters
    # @return [UnitRewardResponse]
    def create_reward(create_reward_request, opts = {})
      data, _status_code, _headers = create_reward_with_http_info(create_reward_request, opts)
      data
    end

    # Create Reward
    # Create a Reward via API 
    # @param create_reward_request [CreateRewardRequest] Create Reward Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitRewardResponse, Integer, Hash)>] UnitRewardResponse data, response status code and response headers
    def create_reward_with_http_info(create_reward_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_reward ...'
      end
      # verify the required parameter 'create_reward_request' is set
      if @api_client.config.client_side_validation && create_reward_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_reward_request' when calling UnitApi.create_reward"
      end
      # resource path
      local_var_path = '/rewards'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_reward_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRewardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_reward",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_reward\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Stop Payment
    # @param create_stop_payment_request [CreateStopPaymentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [StopPaymentResponse]
    def create_stop_payment(create_stop_payment_request, opts = {})
      data, _status_code, _headers = create_stop_payment_with_http_info(create_stop_payment_request, opts)
      data
    end

    # Create Stop Payment
    # @param create_stop_payment_request [CreateStopPaymentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StopPaymentResponse, Integer, Hash)>] StopPaymentResponse data, response status code and response headers
    def create_stop_payment_with_http_info(create_stop_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_stop_payment ...'
      end
      # verify the required parameter 'create_stop_payment_request' is set
      if @api_client.config.client_side_validation && create_stop_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_stop_payment_request' when calling UnitApi.create_stop_payment"
      end
      # resource path
      local_var_path = '/stop-payments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_stop_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'StopPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_stop_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_stop_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Webhook
    # Create a Webhook via API 
    # @param create_webhook_request [CreateWebhookRequest] Create Webhook Request Body
    # @param [Hash] opts the optional parameters
    # @return [UnitWebhookResponse]
    def create_webhook(create_webhook_request, opts = {})
      data, _status_code, _headers = create_webhook_with_http_info(create_webhook_request, opts)
      data
    end

    # Create Webhook
    # Create a Webhook via API 
    # @param create_webhook_request [CreateWebhookRequest] Create Webhook Request Body
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitWebhookResponse, Integer, Hash)>] UnitWebhookResponse data, response status code and response headers
    def create_webhook_with_http_info(create_webhook_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.create_webhook ...'
      end
      # verify the required parameter 'create_webhook_request' is set
      if @api_client.config.client_side_validation && create_webhook_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_webhook_request' when calling UnitApi.create_webhook"
      end
      # resource path
      local_var_path = '/webhooks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_webhook_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitWebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.create_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#create_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deactivate Account Control Agreement by Id
    # Deactivate Control Agreement for Account via API
    # @param account_id [String] ID of the account
    # @param [Hash] opts the optional parameters
    # @return [UnitAccountResponse]
    def deactivate_control_agreement_for_account(account_id, opts = {})
      data, _status_code, _headers = deactivate_control_agreement_for_account_with_http_info(account_id, opts)
      data
    end

    # Deactivate Account Control Agreement by Id
    # Deactivate Control Agreement for Account via API
    # @param account_id [String] ID of the account
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitAccountResponse, Integer, Hash)>] UnitAccountResponse data, response status code and response headers
    def deactivate_control_agreement_for_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.deactivate_control_agreement_for_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.deactivate_control_agreement_for_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/deactivate-daca'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.deactivate_control_agreement_for_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#deactivate_control_agreement_for_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Decline Authorization Request
    # Decline Authorization Request via API 
    # @param authorization_id [String] ID of the authorization request to decline
    # @param decline_authorization_request [DeclineAuthorizationRequest] Decline Authorization Request
    # @param [Hash] opts the optional parameters
    # @return [UnitAuthorizationRequestResponse]
    def decline_authorization_request(authorization_id, decline_authorization_request, opts = {})
      data, _status_code, _headers = decline_authorization_request_with_http_info(authorization_id, decline_authorization_request, opts)
      data
    end

    # Decline Authorization Request
    # Decline Authorization Request via API 
    # @param authorization_id [String] ID of the authorization request to decline
    # @param decline_authorization_request [DeclineAuthorizationRequest] Decline Authorization Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitAuthorizationRequestResponse, Integer, Hash)>] UnitAuthorizationRequestResponse data, response status code and response headers
    def decline_authorization_request_with_http_info(authorization_id, decline_authorization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.decline_authorization_request ...'
      end
      # verify the required parameter 'authorization_id' is set
      if @api_client.config.client_side_validation && authorization_id.nil?
        fail ArgumentError, "Missing the required parameter 'authorization_id' when calling UnitApi.decline_authorization_request"
      end
      # verify the required parameter 'decline_authorization_request' is set
      if @api_client.config.client_side_validation && decline_authorization_request.nil?
        fail ArgumentError, "Missing the required parameter 'decline_authorization_request' when calling UnitApi.decline_authorization_request"
      end
      # resource path
      local_var_path = '/authorization-requests/{authorizationId}/decline'.sub('{' + 'authorizationId' + '}', CGI.escape(authorization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(decline_authorization_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAuthorizationRequestResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.decline_authorization_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#decline_authorization_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Counterparty by Id
    # Delete Counterparty via API 
    # @param counterparty_id [String] ID of the counterparty to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_counterparty(counterparty_id, opts = {})
      delete_counterparty_with_http_info(counterparty_id, opts)
      nil
    end

    # Delete Counterparty by Id
    # Delete Counterparty via API 
    # @param counterparty_id [String] ID of the counterparty to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_counterparty_with_http_info(counterparty_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.delete_counterparty ...'
      end
      # verify the required parameter 'counterparty_id' is set
      if @api_client.config.client_side_validation && counterparty_id.nil?
        fail ArgumentError, "Missing the required parameter 'counterparty_id' when calling UnitApi.delete_counterparty"
      end
      # resource path
      local_var_path = '/counterparties/{counterpartyId}'.sub('{' + 'counterpartyId' + '}', CGI.escape(counterparty_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.delete_counterparty",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#delete_counterparty\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Reward by Id
    # Get a Reward from API 
    # @param user_id [String] ID of the user to revoke token
    # @param token_id [String] ID of the token to revoke
    # @param [Hash] opts the optional parameters
    # @return [UnitApiTokenResponse]
    def delete_token(user_id, token_id, opts = {})
      data, _status_code, _headers = delete_token_with_http_info(user_id, token_id, opts)
      data
    end

    # Get Reward by Id
    # Get a Reward from API 
    # @param user_id [String] ID of the user to revoke token
    # @param token_id [String] ID of the token to revoke
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitApiTokenResponse, Integer, Hash)>] UnitApiTokenResponse data, response status code and response headers
    def delete_token_with_http_info(user_id, token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.delete_token ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UnitApi.delete_token"
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling UnitApi.delete_token"
      end
      # resource path
      local_var_path = '/users/{userId}/api-tokens/{tokenId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s)).sub('{' + 'tokenId' + '}', CGI.escape(token_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitApiTokenResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.delete_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#delete_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable Recurring Payment
    # Disable Recurring Payment via API 
    # @param payment_id [String] ID of the payment to disable
    # @param body [Object] Pass empty object in order for content-type to be aquired correctly
    # @param [Hash] opts the optional parameters
    # @return [UnitRecurringPaymentResponse]
    def disable_recurring_payment(payment_id, body, opts = {})
      data, _status_code, _headers = disable_recurring_payment_with_http_info(payment_id, body, opts)
      data
    end

    # Disable Recurring Payment
    # Disable Recurring Payment via API 
    # @param payment_id [String] ID of the payment to disable
    # @param body [Object] Pass empty object in order for content-type to be aquired correctly
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitRecurringPaymentResponse, Integer, Hash)>] UnitRecurringPaymentResponse data, response status code and response headers
    def disable_recurring_payment_with_http_info(payment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.disable_recurring_payment ...'
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling UnitApi.disable_recurring_payment"
      end
      # resource path
      local_var_path = '/recurring-payments/{paymentId}/disable'.sub('{' + 'paymentId' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRecurringPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.disable_recurring_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#disable_recurring_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable Recurring Repayment by Id
    # Disable a Recurring Repayment
    # @param recurring_repayment_id [String] ID of the recurring repayment to disable
    # @param body [Object] Pass empty object in order for content-type to be aquired correctly
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include 
    # @return [UnitRecurringRepaymentResponse]
    def disable_recurring_repayment(recurring_repayment_id, body, opts = {})
      data, _status_code, _headers = disable_recurring_repayment_with_http_info(recurring_repayment_id, body, opts)
      data
    end

    # Disable Recurring Repayment by Id
    # Disable a Recurring Repayment
    # @param recurring_repayment_id [String] ID of the recurring repayment to disable
    # @param body [Object] Pass empty object in order for content-type to be aquired correctly
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include 
    # @return [Array<(UnitRecurringRepaymentResponse, Integer, Hash)>] UnitRecurringRepaymentResponse data, response status code and response headers
    def disable_recurring_repayment_with_http_info(recurring_repayment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.disable_recurring_repayment ...'
      end
      # verify the required parameter 'recurring_repayment_id' is set
      if @api_client.config.client_side_validation && recurring_repayment_id.nil?
        fail ArgumentError, "Missing the required parameter 'recurring_repayment_id' when calling UnitApi.disable_recurring_repayment"
      end
      # resource path
      local_var_path = '/recurring-repayments/{recurringRepaymentId}/disable'.sub('{' + 'recurringRepaymentId' + '}', CGI.escape(recurring_repayment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRecurringRepaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.disable_recurring_repayment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#disable_recurring_repayment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a stop payment
    # @param stop_payment_id [String] ID of the stop payment
    # @param [Hash] opts the optional parameters
    # @return [StopPaymentResponse]
    def disable_stop_payment(stop_payment_id, opts = {})
      data, _status_code, _headers = disable_stop_payment_with_http_info(stop_payment_id, opts)
      data
    end

    # Disable a stop payment
    # @param stop_payment_id [String] ID of the stop payment
    # @param [Hash] opts the optional parameters
    # @return [Array<(StopPaymentResponse, Integer, Hash)>] StopPaymentResponse data, response status code and response headers
    def disable_stop_payment_with_http_info(stop_payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.disable_stop_payment ...'
      end
      # verify the required parameter 'stop_payment_id' is set
      if @api_client.config.client_side_validation && stop_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'stop_payment_id' when calling UnitApi.disable_stop_payment"
      end
      # resource path
      local_var_path = '/stop-payments/{stopPaymentId}/disable'.sub('{' + 'stopPaymentId' + '}', CGI.escape(stop_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StopPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.disable_stop_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#disable_stop_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a Webhook
    # Disable a Webhook via API 
    # @param webhook_id [String] ID of the webhook to disable
    # @param [Hash] opts the optional parameters
    # @return [UnitWebhookResponse]
    def disable_webhook(webhook_id, opts = {})
      data, _status_code, _headers = disable_webhook_with_http_info(webhook_id, opts)
      data
    end

    # Disable a Webhook
    # Disable a Webhook via API 
    # @param webhook_id [String] ID of the webhook to disable
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitWebhookResponse, Integer, Hash)>] UnitWebhookResponse data, response status code and response headers
    def disable_webhook_with_http_info(webhook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.disable_webhook ...'
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling UnitApi.disable_webhook"
      end
      # resource path
      local_var_path = '/webhooks/{webhookId}/disable'.sub('{' + 'webhookId' + '}', CGI.escape(webhook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitWebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.disable_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#disable_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a Document - Back Side
    # Download a Document - Back Side via API
    # @param application_id [String] ID of the application
    # @param document_id [String] ID of the document to download
    # @param [Hash] opts the optional parameters
    # @return [File]
    def download_application_back_side_document(application_id, document_id, opts = {})
      data, _status_code, _headers = download_application_back_side_document_with_http_info(application_id, document_id, opts)
      data
    end

    # Download a Document - Back Side
    # Download a Document - Back Side via API
    # @param application_id [String] ID of the application
    # @param document_id [String] ID of the document to download
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def download_application_back_side_document_with_http_info(application_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.download_application_back_side_document ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling UnitApi.download_application_back_side_document"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling UnitApi.download_application_back_side_document"
      end
      # resource path
      local_var_path = '/applications/{applicationId}/documents/{documentId}/download/back'.sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.download_application_back_side_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#download_application_back_side_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download a Document
    # Download a Document via API 
    # @param application_id [String] ID of the application
    # @param document_id [String] ID of the document to download
    # @param [Hash] opts the optional parameters
    # @return [File]
    def download_application_document(application_id, document_id, opts = {})
      data, _status_code, _headers = download_application_document_with_http_info(application_id, document_id, opts)
      data
    end

    # Download a Document
    # Download a Document via API 
    # @param application_id [String] ID of the application
    # @param document_id [String] ID of the document to download
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def download_application_document_with_http_info(application_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.download_application_document ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling UnitApi.download_application_document"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling UnitApi.download_application_document"
      end
      # resource path
      local_var_path = '/applications/{applicationId}/documents/{documentId}/download'.sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.download_application_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#download_application_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable Recurring Payment
    # Enable Recurring Payment via API 
    # @param payment_id [String] ID of the payment to enable
    # @param body [Object] Pass empty object in order for content-type to be aquired correctly
    # @param [Hash] opts the optional parameters
    # @return [UnitRecurringPaymentResponse]
    def enable_recurring_payment(payment_id, body, opts = {})
      data, _status_code, _headers = enable_recurring_payment_with_http_info(payment_id, body, opts)
      data
    end

    # Enable Recurring Payment
    # Enable Recurring Payment via API 
    # @param payment_id [String] ID of the payment to enable
    # @param body [Object] Pass empty object in order for content-type to be aquired correctly
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitRecurringPaymentResponse, Integer, Hash)>] UnitRecurringPaymentResponse data, response status code and response headers
    def enable_recurring_payment_with_http_info(payment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.enable_recurring_payment ...'
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling UnitApi.enable_recurring_payment"
      end
      # resource path
      local_var_path = '/recurring-payments/{paymentId}/enable'.sub('{' + 'paymentId' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRecurringPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.enable_recurring_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#enable_recurring_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable Recurring Repayment by Id
    # Enable a Recurring Repayment
    # @param recurring_repayment_id [String] ID of the recurring repayment to enable
    # @param body [Object] Pass empty object in order for content-type to be aquired correctly
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include 
    # @return [UnitRecurringRepaymentResponse]
    def enable_recurring_repayment(recurring_repayment_id, body, opts = {})
      data, _status_code, _headers = enable_recurring_repayment_with_http_info(recurring_repayment_id, body, opts)
      data
    end

    # Enable Recurring Repayment by Id
    # Enable a Recurring Repayment
    # @param recurring_repayment_id [String] ID of the recurring repayment to enable
    # @param body [Object] Pass empty object in order for content-type to be aquired correctly
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include 
    # @return [Array<(UnitRecurringRepaymentResponse, Integer, Hash)>] UnitRecurringRepaymentResponse data, response status code and response headers
    def enable_recurring_repayment_with_http_info(recurring_repayment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.enable_recurring_repayment ...'
      end
      # verify the required parameter 'recurring_repayment_id' is set
      if @api_client.config.client_side_validation && recurring_repayment_id.nil?
        fail ArgumentError, "Missing the required parameter 'recurring_repayment_id' when calling UnitApi.enable_recurring_repayment"
      end
      # resource path
      local_var_path = '/recurring-repayments/{recurringRepaymentId}/enable'.sub('{' + 'recurringRepaymentId' + '}', CGI.escape(recurring_repayment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRecurringRepaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.enable_recurring_repayment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#enable_recurring_repayment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable Webhook
    # Enable a Webhook via API 
    # @param webhook_id [String] ID of the webhook to enable
    # @param [Hash] opts the optional parameters
    # @return [UnitWebhookResponse]
    def enable_webhook(webhook_id, opts = {})
      data, _status_code, _headers = enable_webhook_with_http_info(webhook_id, opts)
      data
    end

    # Enable Webhook
    # Enable a Webhook via API 
    # @param webhook_id [String] ID of the webhook to enable
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitWebhookResponse, Integer, Hash)>] UnitWebhookResponse data, response status code and response headers
    def enable_webhook_with_http_info(webhook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.enable_webhook ...'
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling UnitApi.enable_webhook"
      end
      # resource path
      local_var_path = '/webhooks/{webhookId}/enable'.sub('{' + 'webhookId' + '}', CGI.escape(webhook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitWebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.enable_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#enable_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enter Account Control Agreement by Id
    # Enter Control Agreement for Account via API 
    # @param account_id [String] ID of the account
    # @param [Hash] opts the optional parameters
    # @return [UnitAccountResponse]
    def enter_control_agreement_for_account(account_id, opts = {})
      data, _status_code, _headers = enter_control_agreement_for_account_with_http_info(account_id, opts)
      data
    end

    # Enter Account Control Agreement by Id
    # Enter Control Agreement for Account via API 
    # @param account_id [String] ID of the account
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitAccountResponse, Integer, Hash)>] UnitAccountResponse data, response status code and response headers
    def enter_control_agreement_for_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.enter_control_agreement_for_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.enter_control_agreement_for_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/enter-daca'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.enter_control_agreement_for_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#enter_control_agreement_for_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fire Event by Id
    # Fire an Event via API 
    # @param event_id [String] ID of the event to fire
    # @param [Hash] opts the optional parameters
    # @return [UnitEventResponse]
    def fire_event(event_id, opts = {})
      data, _status_code, _headers = fire_event_with_http_info(event_id, opts)
      data
    end

    # Fire Event by Id
    # Fire an Event via API 
    # @param event_id [String] ID of the event to fire
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitEventResponse, Integer, Hash)>] UnitEventResponse data, response status code and response headers
    def fire_event_with_http_info(event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.fire_event ...'
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling UnitApi.fire_event"
      end
      # resource path
      local_var_path = '/events/{eventId}'.sub('{' + 'eventId' + '}', CGI.escape(event_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitEventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.fire_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#fire_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Freeze Account by Id
    # Freeze Account via API 
    # @param account_id [String] ID of the account to freeze
    # @param freeze_account_request [FreezeAccountRequest] Freeze Account Request
    # @param [Hash] opts the optional parameters
    # @return [UnitAccountResponse]
    def freeze_account(account_id, freeze_account_request, opts = {})
      data, _status_code, _headers = freeze_account_with_http_info(account_id, freeze_account_request, opts)
      data
    end

    # Freeze Account by Id
    # Freeze Account via API 
    # @param account_id [String] ID of the account to freeze
    # @param freeze_account_request [FreezeAccountRequest] Freeze Account Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitAccountResponse, Integer, Hash)>] UnitAccountResponse data, response status code and response headers
    def freeze_account_with_http_info(account_id, freeze_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.freeze_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.freeze_account"
      end
      # verify the required parameter 'freeze_account_request' is set
      if @api_client.config.client_side_validation && freeze_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'freeze_account_request' when calling UnitApi.freeze_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/freeze'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(freeze_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.freeze_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#freeze_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Freeze a Card
    # Freeze a Card via API 
    # @param card_id [String] ID of the card to freeze
    # @param [Hash] opts the optional parameters
    # @return [UnitCardResponse]
    def freeze_card(card_id, opts = {})
      data, _status_code, _headers = freeze_card_with_http_info(card_id, opts)
      data
    end

    # Freeze a Card
    # Freeze a Card via API 
    # @param card_id [String] ID of the card to freeze
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCardResponse, Integer, Hash)>] UnitCardResponse data, response status code and response headers
    def freeze_card_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.freeze_card ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling UnitApi.freeze_card"
      end
      # resource path
      local_var_path = '/cards/{cardId}/freeze'.sub('{' + 'cardId' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.freeze_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#freeze_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Cash Deposit Barcode
    # Generate Cash Deposit Barcode via API 
    # @param generate_barcode_request [GenerateBarcodeRequest] Generate Cash Deposit Barcode Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCashDepositBarcodeResponse]
    def generate_barcode(generate_barcode_request, opts = {})
      data, _status_code, _headers = generate_barcode_with_http_info(generate_barcode_request, opts)
      data
    end

    # Generate Cash Deposit Barcode
    # Generate Cash Deposit Barcode via API 
    # @param generate_barcode_request [GenerateBarcodeRequest] Generate Cash Deposit Barcode Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCashDepositBarcodeResponse, Integer, Hash)>] UnitCashDepositBarcodeResponse data, response status code and response headers
    def generate_barcode_with_http_info(generate_barcode_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.generate_barcode ...'
      end
      # verify the required parameter 'generate_barcode_request' is set
      if @api_client.config.client_side_validation && generate_barcode_request.nil?
        fail ArgumentError, "Missing the required parameter 'generate_barcode_request' when calling UnitApi.generate_barcode"
      end
      # resource path
      local_var_path = '/cash-deposits/barcodes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_barcode_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCashDepositBarcodeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.generate_barcode",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#generate_barcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Account by Id
    # Get an Account from API 
    # @param account_id [String] ID of the account to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include 
    # @return [UnitAccountResponseWithIncluded]
    def get_account(account_id, opts = {})
      data, _status_code, _headers = get_account_with_http_info(account_id, opts)
      data
    end

    # Get Account by Id
    # Get an Account from API 
    # @param account_id [String] ID of the account to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include 
    # @return [Array<(UnitAccountResponseWithIncluded, Integer, Hash)>] UnitAccountResponseWithIncluded data, response status code and response headers
    def get_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.get_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAccountResponseWithIncluded'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Account Balance History
    # Get Account Balance History List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetAccountBalanceHistoryFilterParameter] :filter 
    # @return [UnitAccountBalanceHistoryResponse]
    def get_account_balance_history(opts = {})
      data, _status_code, _headers = get_account_balance_history_with_http_info(opts)
      data
    end

    # Get Account Balance History
    # Get Account Balance History List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetAccountBalanceHistoryFilterParameter] :filter 
    # @return [Array<(UnitAccountBalanceHistoryResponse, Integer, Hash)>] UnitAccountBalanceHistoryResponse data, response status code and response headers
    def get_account_balance_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_account_balance_history ...'
      end
      # resource path
      local_var_path = '/account-end-of-day'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAccountBalanceHistoryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_account_balance_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_account_balance_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Account Limits by Id
    # Get Account Limits from API 
    # @param account_id [String] ID of the account to get
    # @param [Hash] opts the optional parameters
    # @return [UnitGetAccountLimitsResponse]
    def get_account_limits(account_id, opts = {})
      data, _status_code, _headers = get_account_limits_with_http_info(account_id, opts)
      data
    end

    # Get Account Limits by Id
    # Get Account Limits from API 
    # @param account_id [String] ID of the account to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitGetAccountLimitsResponse, Integer, Hash)>] UnitGetAccountLimitsResponse data, response status code and response headers
    def get_account_limits_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_account_limits ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.get_account_limits"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/limits'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitGetAccountLimitsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_account_limits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_account_limits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Accounts
    # Get List Accounts from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetAccountsListFilterParameter] :filter 
    # @option opts [String] :include 
    # @return [UnitAccountsListResponse]
    def get_accounts_list(opts = {})
      data, _status_code, _headers = get_accounts_list_with_http_info(opts)
      data
    end

    # Get List Accounts
    # Get List Accounts from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetAccountsListFilterParameter] :filter 
    # @option opts [String] :include 
    # @return [Array<(UnitAccountsListResponse, Integer, Hash)>] UnitAccountsListResponse data, response status code and response headers
    def get_accounts_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_accounts_list ...'
      end
      # resource path
      local_var_path = '/accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAccountsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_accounts_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_accounts_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Org API Tokens
    # Get List Org API Tokens from API 
    # @param user_id [String] ID of the user to revoke token
    # @param [Hash] opts the optional parameters
    # @return [UnitOrgApiTokensListResponse]
    def get_api_tokens_list(user_id, opts = {})
      data, _status_code, _headers = get_api_tokens_list_with_http_info(user_id, opts)
      data
    end

    # Get List Org API Tokens
    # Get List Org API Tokens from API 
    # @param user_id [String] ID of the user to revoke token
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitOrgApiTokensListResponse, Integer, Hash)>] UnitOrgApiTokensListResponse data, response status code and response headers
    def get_api_tokens_list_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_api_tokens_list ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UnitApi.get_api_tokens_list"
      end
      # resource path
      local_var_path = '/users/{userId}/api-tokens'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitOrgApiTokensListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_api_tokens_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_api_tokens_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Application by Id
    # Get an Application from API 
    # @param application_id [String] ID of the application to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :included 
    # @return [UnitApplicationResponseWithIncluded]
    def get_application(application_id, opts = {})
      data, _status_code, _headers = get_application_with_http_info(application_id, opts)
      data
    end

    # Get Application by Id
    # Get an Application from API 
    # @param application_id [String] ID of the application to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :included 
    # @return [Array<(UnitApplicationResponseWithIncluded, Integer, Hash)>] UnitApplicationResponseWithIncluded data, response status code and response headers
    def get_application_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_application ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling UnitApi.get_application"
      end
      # resource path
      local_var_path = '/applications/{applicationId}'.sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'included'] = opts[:'included'] if !opts[:'included'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitApplicationResponseWithIncluded'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List of Documents
    # Get List of Documents via API 
    # @param application_id [String] ID of the application to get documents for
    # @param [Hash] opts the optional parameters
    # @return [UnitListDocumentsResponse]
    def get_application_documents(application_id, opts = {})
      data, _status_code, _headers = get_application_documents_with_http_info(application_id, opts)
      data
    end

    # Get List of Documents
    # Get List of Documents via API 
    # @param application_id [String] ID of the application to get documents for
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitListDocumentsResponse, Integer, Hash)>] UnitListDocumentsResponse data, response status code and response headers
    def get_application_documents_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_application_documents ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling UnitApi.get_application_documents"
      end
      # resource path
      local_var_path = '/applications/{applicationId}/documents'.sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitListDocumentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_application_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_application_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ApplicationForm by Id
    # Get an Application Form from API 
    # @param application_form_id [String] ID of the application form to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :included 
    # @return [UnitApplicationFormResponseWithIncluded]
    def get_application_form(application_form_id, opts = {})
      data, _status_code, _headers = get_application_form_with_http_info(application_form_id, opts)
      data
    end

    # Get ApplicationForm by Id
    # Get an Application Form from API 
    # @param application_form_id [String] ID of the application form to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :included 
    # @return [Array<(UnitApplicationFormResponseWithIncluded, Integer, Hash)>] UnitApplicationFormResponseWithIncluded data, response status code and response headers
    def get_application_form_with_http_info(application_form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_application_form ...'
      end
      # verify the required parameter 'application_form_id' is set
      if @api_client.config.client_side_validation && application_form_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_form_id' when calling UnitApi.get_application_form"
      end
      # resource path
      local_var_path = '/application-forms/{applicationFormId}'.sub('{' + 'applicationFormId' + '}', CGI.escape(application_form_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'included'] = opts[:'included'] if !opts[:'included'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitApplicationFormResponseWithIncluded'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_application_form",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_application_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Application Forms
    # Get List Application Forms from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetApplicationFormsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [UnitApplicationFormsListResponse]
    def get_application_forms_list(opts = {})
      data, _status_code, _headers = get_application_forms_list_with_http_info(opts)
      data
    end

    # Get List Application Forms
    # Get List Application Forms from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetApplicationFormsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [Array<(UnitApplicationFormsListResponse, Integer, Hash)>] UnitApplicationFormsListResponse data, response status code and response headers
    def get_application_forms_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_application_forms_list ...'
      end
      # resource path
      local_var_path = '/application-forms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitApplicationFormsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_application_forms_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_application_forms_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Application
    # Get List Applications from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetApplicationsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [UnitListApplicationsResponse]
    def get_applications_list(opts = {})
      data, _status_code, _headers = get_applications_list_with_http_info(opts)
      data
    end

    # Get List Application
    # Get List Applications from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetApplicationsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [Array<(UnitListApplicationsResponse, Integer, Hash)>] UnitListApplicationsResponse data, response status code and response headers
    def get_applications_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_applications_list ...'
      end
      # resource path
      local_var_path = '/applications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json', 'application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitListApplicationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_applications_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_applications_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List of ATM Locations
    # Get List ATM Locations from API 
    # @param [Hash] opts the optional parameters
    # @option opts [GetAtmLocationsListFilterParameter] :filter 
    # @return [Array<AtmLocation>]
    def get_atm_locations_list(opts = {})
      data, _status_code, _headers = get_atm_locations_list_with_http_info(opts)
      data
    end

    # Get List of ATM Locations
    # Get List ATM Locations from API 
    # @param [Hash] opts the optional parameters
    # @option opts [GetAtmLocationsListFilterParameter] :filter 
    # @return [Array<(Array<AtmLocation>, Integer, Hash)>] Array<AtmLocation> data, response status code and response headers
    def get_atm_locations_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_atm_locations_list ...'
      end
      # resource path
      local_var_path = '/atm-locations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AtmLocation>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_atm_locations_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_atm_locations_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Authorization by Id
    # Get a Authorization from API 
    # @param authorization_id [String] ID of the authorization to get
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_none_authorized 
    # @return [UnitAuthorizationResponse]
    def get_authorization(authorization_id, opts = {})
      data, _status_code, _headers = get_authorization_with_http_info(authorization_id, opts)
      data
    end

    # Get Authorization by Id
    # Get a Authorization from API 
    # @param authorization_id [String] ID of the authorization to get
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_none_authorized 
    # @return [Array<(UnitAuthorizationResponse, Integer, Hash)>] UnitAuthorizationResponse data, response status code and response headers
    def get_authorization_with_http_info(authorization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_authorization ...'
      end
      # verify the required parameter 'authorization_id' is set
      if @api_client.config.client_side_validation && authorization_id.nil?
        fail ArgumentError, "Missing the required parameter 'authorization_id' when calling UnitApi.get_authorization"
      end
      # resource path
      local_var_path = '/authorizations/{authorizationId}'.sub('{' + 'authorizationId' + '}', CGI.escape(authorization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeNoneAuthorized'] = opts[:'include_none_authorized'] if !opts[:'include_none_authorized'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAuthorizationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_authorization",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_authorization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Authorization Request by Id
    # Get a Authorization Request from API 
    # @param authorization_id [String] ID of the authorization request to get
    # @param [Hash] opts the optional parameters
    # @return [UnitAuthorizationRequestsResponse]
    def get_authorization_request(authorization_id, opts = {})
      data, _status_code, _headers = get_authorization_request_with_http_info(authorization_id, opts)
      data
    end

    # Get Authorization Request by Id
    # Get a Authorization Request from API 
    # @param authorization_id [String] ID of the authorization request to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitAuthorizationRequestsResponse, Integer, Hash)>] UnitAuthorizationRequestsResponse data, response status code and response headers
    def get_authorization_request_with_http_info(authorization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_authorization_request ...'
      end
      # verify the required parameter 'authorization_id' is set
      if @api_client.config.client_side_validation && authorization_id.nil?
        fail ArgumentError, "Missing the required parameter 'authorization_id' when calling UnitApi.get_authorization_request"
      end
      # resource path
      local_var_path = '/authorization-requests/{authorizationId}'.sub('{' + 'authorizationId' + '}', CGI.escape(authorization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAuthorizationRequestsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_authorization_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_authorization_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Authorization Requests
    # Get List Authorization Requests from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetAuthorizationRequestsListFilterParameter] :filter 
    # @return [UnitListAuthorizationRequestsResponse]
    def get_authorization_requests_list(opts = {})
      data, _status_code, _headers = get_authorization_requests_list_with_http_info(opts)
      data
    end

    # Get List Authorization Requests
    # Get List Authorization Requests from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetAuthorizationRequestsListFilterParameter] :filter 
    # @return [Array<(UnitListAuthorizationRequestsResponse, Integer, Hash)>] UnitListAuthorizationRequestsResponse data, response status code and response headers
    def get_authorization_requests_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_authorization_requests_list ...'
      end
      # resource path
      local_var_path = '/authorization-requests'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitListAuthorizationRequestsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_authorization_requests_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_authorization_requests_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List authorizations
    # Get List Authorizations from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetAuthorizationsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [UnitListAuthorizationsResponse]
    def get_authorizations_list(opts = {})
      data, _status_code, _headers = get_authorizations_list_with_http_info(opts)
      data
    end

    # Get List authorizations
    # Get List Authorizations from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetAuthorizationsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [Array<(UnitListAuthorizationsResponse, Integer, Hash)>] UnitListAuthorizationsResponse data, response status code and response headers
    def get_authorizations_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_authorizations_list ...'
      end
      # resource path
      local_var_path = '/authorizations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitListAuthorizationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_authorizations_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_authorizations_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Back Check Deposit Image by Id
    # Get Back Check Deposit Image from API 
    # @param check_deposit_id [String] ID of the check deposit to get
    # @param [Hash] opts the optional parameters
    # @return [UnitBackCheckDepositResponse]
    def get_back_check_deposit(check_deposit_id, opts = {})
      data, _status_code, _headers = get_back_check_deposit_with_http_info(check_deposit_id, opts)
      data
    end

    # Get Back Check Deposit Image by Id
    # Get Back Check Deposit Image from API 
    # @param check_deposit_id [String] ID of the check deposit to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitBackCheckDepositResponse, Integer, Hash)>] UnitBackCheckDepositResponse data, response status code and response headers
    def get_back_check_deposit_with_http_info(check_deposit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_back_check_deposit ...'
      end
      # verify the required parameter 'check_deposit_id' is set
      if @api_client.config.client_side_validation && check_deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_deposit_id' when calling UnitApi.get_back_check_deposit"
      end
      # resource path
      local_var_path = '/check-deposits/{checkDepositId}/back'.sub('{' + 'checkDepositId' + '}', CGI.escape(check_deposit_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitBackCheckDepositResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_back_check_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_back_check_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Barcode Image By Barcode Number
    # Get Barcode Image By Barcode Number from API 
    # @param barcode_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_barcode_image(barcode_number, opts = {})
      data, _status_code, _headers = get_barcode_image_with_http_info(barcode_number, opts)
      data
    end

    # Get Barcode Image By Barcode Number
    # Get Barcode Image By Barcode Number from API 
    # @param barcode_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_barcode_image_with_http_info(barcode_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_barcode_image ...'
      end
      # verify the required parameter 'barcode_number' is set
      if @api_client.config.client_side_validation && barcode_number.nil?
        fail ArgumentError, "Missing the required parameter 'barcode_number' when calling UnitApi.get_barcode_image"
      end
      # resource path
      local_var_path = '/cash-deposits/barcodes/{barcodeNumber}/image'.sub('{' + 'barcodeNumber' + '}', CGI.escape(barcode_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_barcode_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_barcode_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Card by Id
    # Get a Card from API 
    # @param card_id [String] ID of the card to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :included 
    # @return [UnitCardResponseWithIncluded]
    def get_card(card_id, opts = {})
      data, _status_code, _headers = get_card_with_http_info(card_id, opts)
      data
    end

    # Get Card by Id
    # Get a Card from API 
    # @param card_id [String] ID of the card to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :included 
    # @return [Array<(UnitCardResponseWithIncluded, Integer, Hash)>] UnitCardResponseWithIncluded data, response status code and response headers
    def get_card_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_card ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling UnitApi.get_card"
      end
      # resource path
      local_var_path = '/cards/{cardId}'.sub('{' + 'cardId' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'included'] = opts[:'included'] if !opts[:'included'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCardResponseWithIncluded'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Card Limit by Id
    # Get a Card Limits from API 
    # @param card_id [String] ID of the card to get
    # @param [Hash] opts the optional parameters
    # @return [UnitCardLimitsResponse]
    def get_card_limits(card_id, opts = {})
      data, _status_code, _headers = get_card_limits_with_http_info(card_id, opts)
      data
    end

    # Get Card Limit by Id
    # Get a Card Limits from API 
    # @param card_id [String] ID of the card to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCardLimitsResponse, Integer, Hash)>] UnitCardLimitsResponse data, response status code and response headers
    def get_card_limits_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_card_limits ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling UnitApi.get_card_limits"
      end
      # resource path
      local_var_path = '/cards/{cardId}/limits'.sub('{' + 'cardId' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCardLimitsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_card_limits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_card_limits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Card PIN Status
    # Get Card PIN Status via API 
    # @param card_id [String] ID of the card to get PIN status
    # @param [Hash] opts the optional parameters
    # @return [UnitPinStatusResponse]
    def get_card_pin_status(card_id, opts = {})
      data, _status_code, _headers = get_card_pin_status_with_http_info(card_id, opts)
      data
    end

    # Get Card PIN Status
    # Get Card PIN Status via API 
    # @param card_id [String] ID of the card to get PIN status
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitPinStatusResponse, Integer, Hash)>] UnitPinStatusResponse data, response status code and response headers
    def get_card_pin_status_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_card_pin_status ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling UnitApi.get_card_pin_status"
      end
      # resource path
      local_var_path = '/cards/{cardId}/secure-data/pin/status'.sub('{' + 'cardId' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitPinStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_card_pin_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_card_pin_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List of Cards
    # Get List of Cards from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetCardsListFilterParameter] :filter 
    # @option opts [String] :include 
    # @option opts [String] :sort 
    # @return [UnitCardsListReponse]
    def get_cards_list(opts = {})
      data, _status_code, _headers = get_cards_list_with_http_info(opts)
      data
    end

    # Get List of Cards
    # Get List of Cards from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetCardsListFilterParameter] :filter 
    # @option opts [String] :include 
    # @option opts [String] :sort 
    # @return [Array<(UnitCardsListReponse, Integer, Hash)>] UnitCardsListReponse data, response status code and response headers
    def get_cards_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_cards_list ...'
      end
      # resource path
      local_var_path = '/cards'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCardsListReponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_cards_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_cards_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Cash Deposit Store Locations List By Coordinates
    # Get Cash Deposit Store Locations List By Coordinates from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetCashDepositStoreLocationsListFilterParameter] :filter 
    # @return [UnitStoreLocationsListResponse]
    def get_cash_deposit_store_locations_list(opts = {})
      data, _status_code, _headers = get_cash_deposit_store_locations_list_with_http_info(opts)
      data
    end

    # Get Cash Deposit Store Locations List By Coordinates
    # Get Cash Deposit Store Locations List By Coordinates from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetCashDepositStoreLocationsListFilterParameter] :filter 
    # @return [Array<(UnitStoreLocationsListResponse, Integer, Hash)>] UnitStoreLocationsListResponse data, response status code and response headers
    def get_cash_deposit_store_locations_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_cash_deposit_store_locations_list ...'
      end
      # resource path
      local_var_path = '/store-locations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitStoreLocationsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_cash_deposit_store_locations_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_cash_deposit_store_locations_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Check Deposit by Id
    # Get a Check Deposit from API 
    # @param check_deposit_id [String] ID of the check deposit to get
    # @param [Hash] opts the optional parameters
    # @return [UnitCheckDepositResponse]
    def get_check_deposit(check_deposit_id, opts = {})
      data, _status_code, _headers = get_check_deposit_with_http_info(check_deposit_id, opts)
      data
    end

    # Get Check Deposit by Id
    # Get a Check Deposit from API 
    # @param check_deposit_id [String] ID of the check deposit to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCheckDepositResponse, Integer, Hash)>] UnitCheckDepositResponse data, response status code and response headers
    def get_check_deposit_with_http_info(check_deposit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_check_deposit ...'
      end
      # verify the required parameter 'check_deposit_id' is set
      if @api_client.config.client_side_validation && check_deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_deposit_id' when calling UnitApi.get_check_deposit"
      end
      # resource path
      local_var_path = '/check-deposits/{checkDepositId}'.sub('{' + 'checkDepositId' + '}', CGI.escape(check_deposit_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCheckDepositResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_check_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_check_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Check Deposits
    # Get List Check Deposits from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetCheckDepositsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @option opts [String] :include 
    # @return [UnitListCheckDepositResponse]
    def get_check_deposits_list(opts = {})
      data, _status_code, _headers = get_check_deposits_list_with_http_info(opts)
      data
    end

    # Get List Check Deposits
    # Get List Check Deposits from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetCheckDepositsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @option opts [String] :include 
    # @return [Array<(UnitListCheckDepositResponse, Integer, Hash)>] UnitListCheckDepositResponse data, response status code and response headers
    def get_check_deposits_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_check_deposits_list ...'
      end
      # resource path
      local_var_path = '/check-deposits'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitListCheckDepositResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_check_deposits_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_check_deposits_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Check Payment by Id
    # Get a Check Payment from API 
    # @param check_payment_id [String] ID of the check payment to get
    # @param [Hash] opts the optional parameters
    # @return [UnitCheckPaymentResponse]
    def get_check_payment(check_payment_id, opts = {})
      data, _status_code, _headers = get_check_payment_with_http_info(check_payment_id, opts)
      data
    end

    # Get Check Payment by Id
    # Get a Check Payment from API 
    # @param check_payment_id [String] ID of the check payment to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCheckPaymentResponse, Integer, Hash)>] UnitCheckPaymentResponse data, response status code and response headers
    def get_check_payment_with_http_info(check_payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_check_payment ...'
      end
      # verify the required parameter 'check_payment_id' is set
      if @api_client.config.client_side_validation && check_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_payment_id' when calling UnitApi.get_check_payment"
      end
      # resource path
      local_var_path = '/check-payments/{checkPaymentId}'.sub('{' + 'checkPaymentId' + '}', CGI.escape(check_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCheckPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_check_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_check_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get back image
    # Get back image via API 
    # @param check_payment_id [String] ID of the check payment
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_check_payment_back(check_payment_id, opts = {})
      data, _status_code, _headers = get_check_payment_back_with_http_info(check_payment_id, opts)
      data
    end

    # Get back image
    # Get back image via API 
    # @param check_payment_id [String] ID of the check payment
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_check_payment_back_with_http_info(check_payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_check_payment_back ...'
      end
      # verify the required parameter 'check_payment_id' is set
      if @api_client.config.client_side_validation && check_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_payment_id' when calling UnitApi.get_check_payment_back"
      end
      # resource path
      local_var_path = '/check-payments/{checkPaymentId}/back'.sub('{' + 'checkPaymentId' + '}', CGI.escape(check_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_check_payment_back",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_check_payment_back\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get front image
    # Get front image via API 
    # @param check_payment_id [String] ID of the check payment
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_check_payment_front(check_payment_id, opts = {})
      data, _status_code, _headers = get_check_payment_front_with_http_info(check_payment_id, opts)
      data
    end

    # Get front image
    # Get front image via API 
    # @param check_payment_id [String] ID of the check payment
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_check_payment_front_with_http_info(check_payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_check_payment_front ...'
      end
      # verify the required parameter 'check_payment_id' is set
      if @api_client.config.client_side_validation && check_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_payment_id' when calling UnitApi.get_check_payment_front"
      end
      # resource path
      local_var_path = '/check-payments/{checkPaymentId}/front'.sub('{' + 'checkPaymentId' + '}', CGI.escape(check_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_check_payment_front",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_check_payment_front\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Check Payments
    # Get List Check Payments from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetCheckPaymentsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @option opts [String] :include 
    # @return [UnitListCheckPaymentsResponse]
    def get_check_payments_list(opts = {})
      data, _status_code, _headers = get_check_payments_list_with_http_info(opts)
      data
    end

    # Get List Check Payments
    # Get List Check Payments from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetCheckPaymentsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @option opts [String] :include 
    # @return [Array<(UnitListCheckPaymentsResponse, Integer, Hash)>] UnitListCheckPaymentsResponse data, response status code and response headers
    def get_check_payments_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_check_payments_list ...'
      end
      # resource path
      local_var_path = '/check-payments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitListCheckPaymentsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_check_payments_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_check_payments_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Counterparties List
    # Get Counterparties List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetCounterpartiesListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [UnitCounterpartiesListResponse]
    def get_counterparties_list(opts = {})
      data, _status_code, _headers = get_counterparties_list_with_http_info(opts)
      data
    end

    # Get Counterparties List
    # Get Counterparties List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetCounterpartiesListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [Array<(UnitCounterpartiesListResponse, Integer, Hash)>] UnitCounterpartiesListResponse data, response status code and response headers
    def get_counterparties_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_counterparties_list ...'
      end
      # resource path
      local_var_path = '/counterparties'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCounterpartiesListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_counterparties_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_counterparties_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Counterparty by Id
    # Get a Counterparty from API 
    # @param counterparty_id [String] ID of the counterparty to get
    # @param [Hash] opts the optional parameters
    # @return [UnitCounterpartyResponse]
    def get_counterparty(counterparty_id, opts = {})
      data, _status_code, _headers = get_counterparty_with_http_info(counterparty_id, opts)
      data
    end

    # Get Counterparty by Id
    # Get a Counterparty from API 
    # @param counterparty_id [String] ID of the counterparty to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCounterpartyResponse, Integer, Hash)>] UnitCounterpartyResponse data, response status code and response headers
    def get_counterparty_with_http_info(counterparty_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_counterparty ...'
      end
      # verify the required parameter 'counterparty_id' is set
      if @api_client.config.client_side_validation && counterparty_id.nil?
        fail ArgumentError, "Missing the required parameter 'counterparty_id' when calling UnitApi.get_counterparty"
      end
      # resource path
      local_var_path = '/counterparties/{counterpartyId}'.sub('{' + 'counterpartyId' + '}', CGI.escape(counterparty_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCounterpartyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_counterparty",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_counterparty\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Counterparty Balance
    # Get Recurring Payment from API 
    # @param counterparty_id [String] ID of the counterparty to get
    # @param [Hash] opts the optional parameters
    # @return [UnitCounterpartyBalanceResponse]
    def get_counterparty_balance(counterparty_id, opts = {})
      data, _status_code, _headers = get_counterparty_balance_with_http_info(counterparty_id, opts)
      data
    end

    # Get Counterparty Balance
    # Get Recurring Payment from API 
    # @param counterparty_id [String] ID of the counterparty to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCounterpartyBalanceResponse, Integer, Hash)>] UnitCounterpartyBalanceResponse data, response status code and response headers
    def get_counterparty_balance_with_http_info(counterparty_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_counterparty_balance ...'
      end
      # verify the required parameter 'counterparty_id' is set
      if @api_client.config.client_side_validation && counterparty_id.nil?
        fail ArgumentError, "Missing the required parameter 'counterparty_id' when calling UnitApi.get_counterparty_balance"
      end
      # resource path
      local_var_path = '/counterparties/{counterpartyId}/balance'.sub('{' + 'counterpartyId' + '}', CGI.escape(counterparty_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCounterpartyBalanceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_counterparty_balance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_counterparty_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Customer by Id
    # Get a Customer from API 
    # @param customer_id [String] ID of the customer to get
    # @param [Hash] opts the optional parameters
    # @return [UnitCustomerResponse]
    def get_customer(customer_id, opts = {})
      data, _status_code, _headers = get_customer_with_http_info(customer_id, opts)
      data
    end

    # Get Customer by Id
    # Get a Customer from API 
    # @param customer_id [String] ID of the customer to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCustomerResponse, Integer, Hash)>] UnitCustomerResponse data, response status code and response headers
    def get_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UnitApi.get_customer"
      end
      # resource path
      local_var_path = '/customers/{customerId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCustomerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Customers List
    # Get Customers List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetCustomersListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [UnitCustomersListResponse]
    def get_customers_list(opts = {})
      data, _status_code, _headers = get_customers_list_with_http_info(opts)
      data
    end

    # Get Customers List
    # Get Customers List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetCustomersListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [Array<(UnitCustomersListResponse, Integer, Hash)>] UnitCustomersListResponse data, response status code and response headers
    def get_customers_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_customers_list ...'
      end
      # resource path
      local_var_path = '/customers'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCustomersListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_customers_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_customers_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Deposit Products
    # Retrieve the list of available deposit products compatible to the account.
    # @param account_id [String] ID of the account to get deposit products for
    # @param [Hash] opts the optional parameters
    # @return [UnitDepositProductsResponse]
    def get_deposit_products_list(account_id, opts = {})
      data, _status_code, _headers = get_deposit_products_list_with_http_info(account_id, opts)
      data
    end

    # Get Deposit Products
    # Retrieve the list of available deposit products compatible to the account.
    # @param account_id [String] ID of the account to get deposit products for
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitDepositProductsResponse, Integer, Hash)>] UnitDepositProductsResponse data, response status code and response headers
    def get_deposit_products_list_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_deposit_products_list ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.get_deposit_products_list"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/deposit-products'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitDepositProductsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_deposit_products_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_deposit_products_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Dispute by Id
    # Get a Dispute from API 
    # @param dispute_id [String] ID of the dispute to get
    # @param [Hash] opts the optional parameters
    # @return [UnitDisputeResponse]
    def get_dispute(dispute_id, opts = {})
      data, _status_code, _headers = get_dispute_with_http_info(dispute_id, opts)
      data
    end

    # Get Dispute by Id
    # Get a Dispute from API 
    # @param dispute_id [String] ID of the dispute to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitDisputeResponse, Integer, Hash)>] UnitDisputeResponse data, response status code and response headers
    def get_dispute_with_http_info(dispute_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_dispute ...'
      end
      # verify the required parameter 'dispute_id' is set
      if @api_client.config.client_side_validation && dispute_id.nil?
        fail ArgumentError, "Missing the required parameter 'dispute_id' when calling UnitApi.get_dispute"
      end
      # resource path
      local_var_path = '/disputes/{disputeId}'.sub('{' + 'disputeId' + '}', CGI.escape(dispute_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitDisputeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_dispute",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_dispute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Disputes
    # Get List Disputes from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetDisputesListFilterParameter] :filter 
    # @return [Array<Dispute>]
    def get_disputes_list(opts = {})
      data, _status_code, _headers = get_disputes_list_with_http_info(opts)
      data
    end

    # Get List Disputes
    # Get List Disputes from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetDisputesListFilterParameter] :filter 
    # @return [Array<(Array<Dispute>, Integer, Hash)>] Array<Dispute> data, response status code and response headers
    def get_disputes_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_disputes_list ...'
      end
      # resource path
      local_var_path = '/disputes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Dispute>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_disputes_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_disputes_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Event by Id
    # Get an Event from API 
    # @param event_id [String] ID of the event to get
    # @param [Hash] opts the optional parameters
    # @return [UnitEventResponse]
    def get_event(event_id, opts = {})
      data, _status_code, _headers = get_event_with_http_info(event_id, opts)
      data
    end

    # Get Event by Id
    # Get an Event from API 
    # @param event_id [String] ID of the event to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitEventResponse, Integer, Hash)>] UnitEventResponse data, response status code and response headers
    def get_event_with_http_info(event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_event ...'
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling UnitApi.get_event"
      end
      # resource path
      local_var_path = '/events/{eventId}'.sub('{' + 'eventId' + '}', CGI.escape(event_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitEventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Events List
    # Get Events List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetEventsListFilterParameter] :filter 
    # @return [UnitEventListResponse]
    def get_events_list(opts = {})
      data, _status_code, _headers = get_events_list_with_http_info(opts)
      data
    end

    # Get Events List
    # Get Events List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetEventsListFilterParameter] :filter 
    # @return [Array<(UnitEventListResponse, Integer, Hash)>] UnitEventListResponse data, response status code and response headers
    def get_events_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_events_list ...'
      end
      # resource path
      local_var_path = '/events'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitEventListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_events_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_events_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Front Check Deposit Image by Id
    # Get Front Check Deposit Image from API 
    # @param check_deposit_id [String] ID of the check deposit to get
    # @param [Hash] opts the optional parameters
    # @return [UnitFrontCheckDepositResponse]
    def get_front_check_deposit(check_deposit_id, opts = {})
      data, _status_code, _headers = get_front_check_deposit_with_http_info(check_deposit_id, opts)
      data
    end

    # Get Front Check Deposit Image by Id
    # Get Front Check Deposit Image from API 
    # @param check_deposit_id [String] ID of the check deposit to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitFrontCheckDepositResponse, Integer, Hash)>] UnitFrontCheckDepositResponse data, response status code and response headers
    def get_front_check_deposit_with_http_info(check_deposit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_front_check_deposit ...'
      end
      # verify the required parameter 'check_deposit_id' is set
      if @api_client.config.client_side_validation && check_deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_deposit_id' when calling UnitApi.get_front_check_deposit"
      end
      # resource path
      local_var_path = '/check-deposits/{checkDepositId}/front'.sub('{' + 'checkDepositId' + '}', CGI.escape(check_deposit_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitFrontCheckDepositResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_front_check_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_front_check_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Institution by Routing Number
    # Get an Institution from API 
    # @param routing_number [String] routingNumber of the institution to get
    # @param [Hash] opts the optional parameters
    # @return [UnitInstitutionResponse]
    def get_institution(routing_number, opts = {})
      data, _status_code, _headers = get_institution_with_http_info(routing_number, opts)
      data
    end

    # Get Institution by Routing Number
    # Get an Institution from API 
    # @param routing_number [String] routingNumber of the institution to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitInstitutionResponse, Integer, Hash)>] UnitInstitutionResponse data, response status code and response headers
    def get_institution_with_http_info(routing_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_institution ...'
      end
      # verify the required parameter 'routing_number' is set
      if @api_client.config.client_side_validation && routing_number.nil?
        fail ArgumentError, "Missing the required parameter 'routing_number' when calling UnitApi.get_institution"
      end
      # resource path
      local_var_path = '/institutions/{routingNumber}'.sub('{' + 'routingNumber' + '}', CGI.escape(routing_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitInstitutionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_institution",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_institution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Payment by Id
    # Get a Payment from API 
    # @param payment_id [String] ID of the payment to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :included 
    # @return [UnitPaymentResponseWithIncluded]
    def get_payment(payment_id, opts = {})
      data, _status_code, _headers = get_payment_with_http_info(payment_id, opts)
      data
    end

    # Get Payment by Id
    # Get a Payment from API 
    # @param payment_id [String] ID of the payment to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :included 
    # @return [Array<(UnitPaymentResponseWithIncluded, Integer, Hash)>] UnitPaymentResponseWithIncluded data, response status code and response headers
    def get_payment_with_http_info(payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_payment ...'
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling UnitApi.get_payment"
      end
      # resource path
      local_var_path = '/payments/{paymentId}'.sub('{' + 'paymentId' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'included'] = opts[:'included'] if !opts[:'included'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitPaymentResponseWithIncluded'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Payments
    # Get List Payments from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetPaymentsListFilterParameter] :filter 
    # @option opts [String] :include 
    # @option opts [String] :sort 
    # @return [UnitPaymentsListResponse]
    def get_payments_list(opts = {})
      data, _status_code, _headers = get_payments_list_with_http_info(opts)
      data
    end

    # Get List Payments
    # Get List Payments from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetPaymentsListFilterParameter] :filter 
    # @option opts [String] :include 
    # @option opts [String] :sort 
    # @return [Array<(UnitPaymentsListResponse, Integer, Hash)>] UnitPaymentsListResponse data, response status code and response headers
    def get_payments_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_payments_list ...'
      end
      # resource path
      local_var_path = '/payments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitPaymentsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_payments_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_payments_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Received Payment by Id
    # Get a Received Payment from API 
    # @param payment_id [String] ID of the payment to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :included 
    # @return [UnitReceivedPaymentResponseWithIncluded]
    def get_received_payment(payment_id, opts = {})
      data, _status_code, _headers = get_received_payment_with_http_info(payment_id, opts)
      data
    end

    # Get Received Payment by Id
    # Get a Received Payment from API 
    # @param payment_id [String] ID of the payment to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :included 
    # @return [Array<(UnitReceivedPaymentResponseWithIncluded, Integer, Hash)>] UnitReceivedPaymentResponseWithIncluded data, response status code and response headers
    def get_received_payment_with_http_info(payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_received_payment ...'
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling UnitApi.get_received_payment"
      end
      # resource path
      local_var_path = '/received-payments/{paymentId}'.sub('{' + 'paymentId' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'included'] = opts[:'included'] if !opts[:'included'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitReceivedPaymentResponseWithIncluded'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_received_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_received_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Received Payments List
    # Get Received Payments from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetReceivedPaymentsListFilterParameter] :filter 
    # @option opts [String] :include 
    # @option opts [String] :sort 
    # @return [UnitReceivedPaymentListResponse]
    def get_received_payments_list(opts = {})
      data, _status_code, _headers = get_received_payments_list_with_http_info(opts)
      data
    end

    # Get Received Payments List
    # Get Received Payments from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetReceivedPaymentsListFilterParameter] :filter 
    # @option opts [String] :include 
    # @option opts [String] :sort 
    # @return [Array<(UnitReceivedPaymentListResponse, Integer, Hash)>] UnitReceivedPaymentListResponse data, response status code and response headers
    def get_received_payments_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_received_payments_list ...'
      end
      # resource path
      local_var_path = '/received-payments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitReceivedPaymentListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_received_payments_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_received_payments_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recurring Payment
    # Get Recurring Payment from API 
    # @param payment_id [String] ID of the payment to get
    # @param [Hash] opts the optional parameters
    # @return [UnitRecurringPaymentResponse]
    def get_recurring_payment(payment_id, opts = {})
      data, _status_code, _headers = get_recurring_payment_with_http_info(payment_id, opts)
      data
    end

    # Get Recurring Payment
    # Get Recurring Payment from API 
    # @param payment_id [String] ID of the payment to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitRecurringPaymentResponse, Integer, Hash)>] UnitRecurringPaymentResponse data, response status code and response headers
    def get_recurring_payment_with_http_info(payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_recurring_payment ...'
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling UnitApi.get_recurring_payment"
      end
      # resource path
      local_var_path = '/recurring-payments/{paymentId}'.sub('{' + 'paymentId' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRecurringPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_recurring_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_recurring_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recurring Payments List
    # Get Recurring Payments List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetRecurringPaymentsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [UnitRecurringPaymentListResponse]
    def get_recurring_payments_list(opts = {})
      data, _status_code, _headers = get_recurring_payments_list_with_http_info(opts)
      data
    end

    # Get Recurring Payments List
    # Get Recurring Payments List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetRecurringPaymentsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [Array<(UnitRecurringPaymentListResponse, Integer, Hash)>] UnitRecurringPaymentListResponse data, response status code and response headers
    def get_recurring_payments_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_recurring_payments_list ...'
      end
      # resource path
      local_var_path = '/recurring-payments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRecurringPaymentListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_recurring_payments_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_recurring_payments_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recurring Repayment by Id
    # Get a Recurring Repayment from API 
    # @param recurring_repayment_id [String] ID of the recurring repayment to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include 
    # @return [UnitRecurringRepaymentResponse]
    def get_recurring_repayment(recurring_repayment_id, opts = {})
      data, _status_code, _headers = get_recurring_repayment_with_http_info(recurring_repayment_id, opts)
      data
    end

    # Get Recurring Repayment by Id
    # Get a Recurring Repayment from API 
    # @param recurring_repayment_id [String] ID of the recurring repayment to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include 
    # @return [Array<(UnitRecurringRepaymentResponse, Integer, Hash)>] UnitRecurringRepaymentResponse data, response status code and response headers
    def get_recurring_repayment_with_http_info(recurring_repayment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_recurring_repayment ...'
      end
      # verify the required parameter 'recurring_repayment_id' is set
      if @api_client.config.client_side_validation && recurring_repayment_id.nil?
        fail ArgumentError, "Missing the required parameter 'recurring_repayment_id' when calling UnitApi.get_recurring_repayment"
      end
      # resource path
      local_var_path = '/recurring-repayments/{recurringRepaymentId}'.sub('{' + 'recurringRepaymentId' + '}', CGI.escape(recurring_repayment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRecurringRepaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_recurring_repayment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_recurring_repayment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Recurring Repayments
    # Get List Recurring Repayments from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetRecurringRepaymentsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [UnitRecurringRepaymentsListResponse]
    def get_recurring_repayments_list(opts = {})
      data, _status_code, _headers = get_recurring_repayments_list_with_http_info(opts)
      data
    end

    # Get List Recurring Repayments
    # Get List Recurring Repayments from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetRecurringRepaymentsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [Array<(UnitRecurringRepaymentsListResponse, Integer, Hash)>] UnitRecurringRepaymentsListResponse data, response status code and response headers
    def get_recurring_repayments_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_recurring_repayments_list ...'
      end
      allowable_values = ["createdAt", "-createdAt"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/recurring-repayments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRecurringRepaymentsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_recurring_repayments_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_recurring_repayments_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Repayment by Id
    # Get an Repayment from API 
    # @param repayment_id [String] ID of the repayment to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include 
    # @return [UnitRepaymentResponse]
    def get_repayment(repayment_id, opts = {})
      data, _status_code, _headers = get_repayment_with_http_info(repayment_id, opts)
      data
    end

    # Get Repayment by Id
    # Get an Repayment from API 
    # @param repayment_id [String] ID of the repayment to get
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include 
    # @return [Array<(UnitRepaymentResponse, Integer, Hash)>] UnitRepaymentResponse data, response status code and response headers
    def get_repayment_with_http_info(repayment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_repayment ...'
      end
      # verify the required parameter 'repayment_id' is set
      if @api_client.config.client_side_validation && repayment_id.nil?
        fail ArgumentError, "Missing the required parameter 'repayment_id' when calling UnitApi.get_repayment"
      end
      # resource path
      local_var_path = '/repayments/{repaymentId}'.sub('{' + 'repaymentId' + '}', CGI.escape(repayment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRepaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_repayment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_repayment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Repayment Information
    # Retrieve the repayment information for a specific account via API
    # @param account_id [String] ID of the account to get repayment information for
    # @param [Hash] opts the optional parameters
    # @return [UnitRepaymentInformationResponse]
    def get_repayment_information(account_id, opts = {})
      data, _status_code, _headers = get_repayment_information_with_http_info(account_id, opts)
      data
    end

    # Get Repayment Information
    # Retrieve the repayment information for a specific account via API
    # @param account_id [String] ID of the account to get repayment information for
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitRepaymentInformationResponse, Integer, Hash)>] UnitRepaymentInformationResponse data, response status code and response headers
    def get_repayment_information_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_repayment_information ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.get_repayment_information"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/repayment-information'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRepaymentInformationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_repayment_information",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_repayment_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Repayments
    # Get List Repayments from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetRepaymentsListFilterParameter] :filter 
    # @return [UnitRepaymentsListResponse]
    def get_repayments_list(opts = {})
      data, _status_code, _headers = get_repayments_list_with_http_info(opts)
      data
    end

    # Get List Repayments
    # Get List Repayments from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetRepaymentsListFilterParameter] :filter 
    # @return [Array<(UnitRepaymentsListResponse, Integer, Hash)>] UnitRepaymentsListResponse data, response status code and response headers
    def get_repayments_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_repayments_list ...'
      end
      # resource path
      local_var_path = '/repayments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRepaymentsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_repayments_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_repayments_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Reward by Id
    # Get a Reward from API 
    # @param reward_id [String] ID of the reward to get
    # @param [Hash] opts the optional parameters
    # @return [UnitRewardResponse]
    def get_reward(reward_id, opts = {})
      data, _status_code, _headers = get_reward_with_http_info(reward_id, opts)
      data
    end

    # Get Reward by Id
    # Get a Reward from API 
    # @param reward_id [String] ID of the reward to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitRewardResponse, Integer, Hash)>] UnitRewardResponse data, response status code and response headers
    def get_reward_with_http_info(reward_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_reward ...'
      end
      # verify the required parameter 'reward_id' is set
      if @api_client.config.client_side_validation && reward_id.nil?
        fail ArgumentError, "Missing the required parameter 'reward_id' when calling UnitApi.get_reward"
      end
      # resource path
      local_var_path = '/rewards/{rewardId}'.sub('{' + 'rewardId' + '}', CGI.escape(reward_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRewardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_reward",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_reward\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Rewards List
    # Get Rewards List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetRewardsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @option opts [String] :include 
    # @return [UnitRewardsListResponse]
    def get_rewards_list(opts = {})
      data, _status_code, _headers = get_rewards_list_with_http_info(opts)
      data
    end

    # Get Rewards List
    # Get Rewards List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetRewardsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @option opts [String] :include 
    # @return [Array<(UnitRewardsListResponse, Integer, Hash)>] UnitRewardsListResponse data, response status code and response headers
    def get_rewards_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_rewards_list ...'
      end
      # resource path
      local_var_path = '/rewards'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitRewardsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_rewards_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_rewards_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Bank verification PDF
    # Get Get Bank verification PDF from API 
    # @param account_id [String] ID of the account to get
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_statement_bank_pdf(account_id, opts = {})
      data, _status_code, _headers = get_statement_bank_pdf_with_http_info(account_id, opts)
      data
    end

    # Get Bank verification PDF
    # Get Get Bank verification PDF from API 
    # @param account_id [String] ID of the account to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_statement_bank_pdf_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_statement_bank_pdf ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.get_statement_bank_pdf"
      end
      # resource path
      local_var_path = '/statements/{accountId}/bank/pdf'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_statement_bank_pdf",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_statement_bank_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get HTML Statement by Id
    # Get a HTML Statement from API 
    # @param statement_id [String] ID of the statement to get
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_statement_html(statement_id, opts = {})
      data, _status_code, _headers = get_statement_html_with_http_info(statement_id, opts)
      data
    end

    # Get HTML Statement by Id
    # Get a HTML Statement from API 
    # @param statement_id [String] ID of the statement to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_statement_html_with_http_info(statement_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_statement_html ...'
      end
      # verify the required parameter 'statement_id' is set
      if @api_client.config.client_side_validation && statement_id.nil?
        fail ArgumentError, "Missing the required parameter 'statement_id' when calling UnitApi.get_statement_html"
      end
      # resource path
      local_var_path = '/statements/{statementId}/html'.sub('{' + 'statementId' + '}', CGI.escape(statement_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_statement_html",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_statement_html\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get PDF Statement by Id
    # Get a PDF Statement from API 
    # @param statement_id [String] ID of the statement to get
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_statement_pdf(statement_id, opts = {})
      data, _status_code, _headers = get_statement_pdf_with_http_info(statement_id, opts)
      data
    end

    # Get PDF Statement by Id
    # Get a PDF Statement from API 
    # @param statement_id [String] ID of the statement to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_statement_pdf_with_http_info(statement_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_statement_pdf ...'
      end
      # verify the required parameter 'statement_id' is set
      if @api_client.config.client_side_validation && statement_id.nil?
        fail ArgumentError, "Missing the required parameter 'statement_id' when calling UnitApi.get_statement_pdf"
      end
      # resource path
      local_var_path = '/statements/{statementId}/pdf'.sub('{' + 'statementId' + '}', CGI.escape(statement_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_statement_pdf",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_statement_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Statements
    # Get List Statements from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetStatementsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [UnitStatementsResponse]
    def get_statements_list(opts = {})
      data, _status_code, _headers = get_statements_list_with_http_info(opts)
      data
    end

    # Get List Statements
    # Get List Statements from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetStatementsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [Array<(UnitStatementsResponse, Integer, Hash)>] UnitStatementsResponse data, response status code and response headers
    def get_statements_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_statements_list ...'
      end
      # resource path
      local_var_path = '/statements'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitStatementsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_statements_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_statements_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a specific stop payment
    # @param stop_payment_id [String] ID of the stop payment
    # @param [Hash] opts the optional parameters
    # @return [StopPaymentResponse]
    def get_stop_payment(stop_payment_id, opts = {})
      data, _status_code, _headers = get_stop_payment_with_http_info(stop_payment_id, opts)
      data
    end

    # Get details of a specific stop payment
    # @param stop_payment_id [String] ID of the stop payment
    # @param [Hash] opts the optional parameters
    # @return [Array<(StopPaymentResponse, Integer, Hash)>] StopPaymentResponse data, response status code and response headers
    def get_stop_payment_with_http_info(stop_payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_stop_payment ...'
      end
      # verify the required parameter 'stop_payment_id' is set
      if @api_client.config.client_side_validation && stop_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'stop_payment_id' when calling UnitApi.get_stop_payment"
      end
      # resource path
      local_var_path = '/stop-payments/{stopPaymentId}'.sub('{' + 'stopPaymentId' + '}', CGI.escape(stop_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StopPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_stop_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_stop_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of stop payments
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetStopPaymentsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [StopPaymentListResponse]
    def get_stop_payments_list(opts = {})
      data, _status_code, _headers = get_stop_payments_list_with_http_info(opts)
      data
    end

    # Get a list of stop payments
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetStopPaymentsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [Array<(StopPaymentListResponse, Integer, Hash)>] StopPaymentListResponse data, response status code and response headers
    def get_stop_payments_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_stop_payments_list ...'
      end
      # resource path
      local_var_path = '/stop-payments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StopPaymentListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_stop_payments_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_stop_payments_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Tax Form by Id
    # Get a Tax Form from API 
    # @param tax_form_id [String] ID of the reward to get
    # @param [Hash] opts the optional parameters
    # @return [UnitTaxFormResponse]
    def get_tax_form(tax_form_id, opts = {})
      data, _status_code, _headers = get_tax_form_with_http_info(tax_form_id, opts)
      data
    end

    # Get Tax Form by Id
    # Get a Tax Form from API 
    # @param tax_form_id [String] ID of the reward to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitTaxFormResponse, Integer, Hash)>] UnitTaxFormResponse data, response status code and response headers
    def get_tax_form_with_http_info(tax_form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_tax_form ...'
      end
      # verify the required parameter 'tax_form_id' is set
      if @api_client.config.client_side_validation && tax_form_id.nil?
        fail ArgumentError, "Missing the required parameter 'tax_form_id' when calling UnitApi.get_tax_form"
      end
      # resource path
      local_var_path = '/tax-forms/{taxFormId}'.sub('{' + 'taxFormId' + '}', CGI.escape(tax_form_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitTaxFormResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_tax_form",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_tax_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Tax Form pdf by Id
    # Get a Tax Form pdf from API 
    # @param tax_form_id [String] ID of the reward to get
    # @param [Hash] opts the optional parameters
    # @return [File]
    def get_tax_form_pdf(tax_form_id, opts = {})
      data, _status_code, _headers = get_tax_form_pdf_with_http_info(tax_form_id, opts)
      data
    end

    # Get Tax Form pdf by Id
    # Get a Tax Form pdf from API 
    # @param tax_form_id [String] ID of the reward to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_tax_form_pdf_with_http_info(tax_form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_tax_form_pdf ...'
      end
      # verify the required parameter 'tax_form_id' is set
      if @api_client.config.client_side_validation && tax_form_id.nil?
        fail ArgumentError, "Missing the required parameter 'tax_form_id' when calling UnitApi.get_tax_form_pdf"
      end
      # resource path
      local_var_path = '/tax-forms/{taxFormId}/pdf'.sub('{' + 'taxFormId' + '}', CGI.escape(tax_form_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_tax_form_pdf",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_tax_form_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Tax Forms List 
    # Get Tax Forms List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetTaxFormsListFilterParameter] :filter 
    # @return [UnitTaxFormsListResponse]
    def get_tax_forms_list(opts = {})
      data, _status_code, _headers = get_tax_forms_list_with_http_info(opts)
      data
    end

    # Get Tax Forms List 
    # Get Tax Forms List from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetTaxFormsListFilterParameter] :filter 
    # @return [Array<(UnitTaxFormsListResponse, Integer, Hash)>] UnitTaxFormsListResponse data, response status code and response headers
    def get_tax_forms_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_tax_forms_list ...'
      end
      # resource path
      local_var_path = '/tax-forms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitTaxFormsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_tax_forms_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_tax_forms_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Transaction by Id
    # Get a Transaction from API 
    # @param account_id [String] ID of the account to get transaction from
    # @param transaction_id [String] ID of the transaction
    # @param [Hash] opts the optional parameters
    # @return [UnitTransactionResponseWithIncludedResource]
    def get_transaction(account_id, transaction_id, opts = {})
      data, _status_code, _headers = get_transaction_with_http_info(account_id, transaction_id, opts)
      data
    end

    # Get Transaction by Id
    # Get a Transaction from API 
    # @param account_id [String] ID of the account to get transaction from
    # @param transaction_id [String] ID of the transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitTransactionResponseWithIncludedResource, Integer, Hash)>] UnitTransactionResponseWithIncludedResource data, response status code and response headers
    def get_transaction_with_http_info(account_id, transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_transaction ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.get_transaction"
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling UnitApi.get_transaction"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/transactions/{transactionId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'transactionId' + '}', CGI.escape(transaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitTransactionResponseWithIncludedResource'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Transactions
    # Get List Transactions from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetTransactionsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @option opts [String] :include 
    # @return [UnitTransactionsListResponse]
    def get_transactions_list(opts = {})
      data, _status_code, _headers = get_transactions_list_with_http_info(opts)
      data
    end

    # Get List Transactions
    # Get List Transactions from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetTransactionsListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @option opts [String] :include 
    # @return [Array<(UnitTransactionsListResponse, Integer, Hash)>] UnitTransactionsListResponse data, response status code and response headers
    def get_transactions_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_transactions_list ...'
      end
      # resource path
      local_var_path = '/transactions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitTransactionsListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_transactions_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_transactions_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Webhook Id
    # Get a Webhook from API 
    # @param webhook_id [String] ID of the webhook to get
    # @param [Hash] opts the optional parameters
    # @return [UnitWebhookResponse]
    def get_webhook(webhook_id, opts = {})
      data, _status_code, _headers = get_webhook_with_http_info(webhook_id, opts)
      data
    end

    # Get Webhook Id
    # Get a Webhook from API 
    # @param webhook_id [String] ID of the webhook to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitWebhookResponse, Integer, Hash)>] UnitWebhookResponse data, response status code and response headers
    def get_webhook_with_http_info(webhook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_webhook ...'
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling UnitApi.get_webhook"
      end
      # resource path
      local_var_path = '/webhooks/{webhookId}'.sub('{' + 'webhookId' + '}', CGI.escape(webhook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitWebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get List Webhooks
    # Get List Webhooks from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetWebhooksListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [UnitWebhooksListResponse]
    def get_webhooks_list(opts = {})
      data, _status_code, _headers = get_webhooks_list_with_http_info(opts)
      data
    end

    # Get List Webhooks
    # Get List Webhooks from API 
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParameters] :page 
    # @option opts [GetWebhooksListFilterParameter] :filter 
    # @option opts [String] :sort 
    # @return [Array<(UnitWebhooksListResponse, Integer, Hash)>] UnitWebhooksListResponse data, response status code and response headers
    def get_webhooks_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.get_webhooks_list ...'
      end
      # resource path
      local_var_path = '/webhooks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitWebhooksListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.get_webhooks_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#get_webhooks_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Received Payment
    # Update a Received Payment via API 
    # @param payment_id [String] ID of the payment to update
    # @param update_received_payment_request [UpdateReceivedPaymentRequest] Update Received Payment Request
    # @param [Hash] opts the optional parameters
    # @return [UnitReceivedPaymentResponse]
    def received_payments_payment_id_patch(payment_id, update_received_payment_request, opts = {})
      data, _status_code, _headers = received_payments_payment_id_patch_with_http_info(payment_id, update_received_payment_request, opts)
      data
    end

    # Update Received Payment
    # Update a Received Payment via API 
    # @param payment_id [String] ID of the payment to update
    # @param update_received_payment_request [UpdateReceivedPaymentRequest] Update Received Payment Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitReceivedPaymentResponse, Integer, Hash)>] UnitReceivedPaymentResponse data, response status code and response headers
    def received_payments_payment_id_patch_with_http_info(payment_id, update_received_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.received_payments_payment_id_patch ...'
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling UnitApi.received_payments_payment_id_patch"
      end
      # verify the required parameter 'update_received_payment_request' is set
      if @api_client.config.client_side_validation && update_received_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_received_payment_request' when calling UnitApi.received_payments_payment_id_patch"
      end
      # resource path
      local_var_path = '/received-payments/{paymentId}'.sub('{' + 'paymentId' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_received_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitReceivedPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.received_payments_payment_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#received_payments_payment_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Owners from Account by Id
    # Remove Owners from Account via API 
    # @param account_id [String] ID of the account to add owners to
    # @param remove_account_owners_request [RemoveAccountOwnersRequest] Remove Account Owners Request
    # @param [Hash] opts the optional parameters
    # @return [UnitDepositAccountResponse]
    def remove_account_owners(account_id, remove_account_owners_request, opts = {})
      data, _status_code, _headers = remove_account_owners_with_http_info(account_id, remove_account_owners_request, opts)
      data
    end

    # Remove Owners from Account by Id
    # Remove Owners from Account via API 
    # @param account_id [String] ID of the account to add owners to
    # @param remove_account_owners_request [RemoveAccountOwnersRequest] Remove Account Owners Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitDepositAccountResponse, Integer, Hash)>] UnitDepositAccountResponse data, response status code and response headers
    def remove_account_owners_with_http_info(account_id, remove_account_owners_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.remove_account_owners ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.remove_account_owners"
      end
      # verify the required parameter 'remove_account_owners_request' is set
      if @api_client.config.client_side_validation && remove_account_owners_request.nil?
        fail ArgumentError, "Missing the required parameter 'remove_account_owners_request' when calling UnitApi.remove_account_owners"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/relationships/customers'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(remove_account_owners_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitDepositAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.remove_account_owners",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#remove_account_owners\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Authorized Users by Id
    # Remove Authorized Users via API
    # @param customer_id [String] ID of the customer to remove authorized users from
    # @param remove_authorized_users_request [RemoveAuthorizedUsersRequest] Add Authorized Users Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCustomerResponse]
    def remove_authorized_users(customer_id, remove_authorized_users_request, opts = {})
      data, _status_code, _headers = remove_authorized_users_with_http_info(customer_id, remove_authorized_users_request, opts)
      data
    end

    # Remove Authorized Users by Id
    # Remove Authorized Users via API
    # @param customer_id [String] ID of the customer to remove authorized users from
    # @param remove_authorized_users_request [RemoveAuthorizedUsersRequest] Add Authorized Users Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCustomerResponse, Integer, Hash)>] UnitCustomerResponse data, response status code and response headers
    def remove_authorized_users_with_http_info(customer_id, remove_authorized_users_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.remove_authorized_users ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UnitApi.remove_authorized_users"
      end
      # verify the required parameter 'remove_authorized_users_request' is set
      if @api_client.config.client_side_validation && remove_authorized_users_request.nil?
        fail ArgumentError, "Missing the required parameter 'remove_authorized_users_request' when calling UnitApi.remove_authorized_users"
      end
      # resource path
      local_var_path = '/customers/{customerId}/authorized-users'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(remove_authorized_users_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCustomerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.remove_authorized_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#remove_authorized_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reopen an Account by Id
    # Reopen an Account via API 
    # @param account_id [String] ID of the account to close
    # @param [Hash] opts the optional parameters
    # @return [UnitAccountResponse]
    def reopen_account(account_id, opts = {})
      data, _status_code, _headers = reopen_account_with_http_info(account_id, opts)
      data
    end

    # Reopen an Account by Id
    # Reopen an Account via API 
    # @param account_id [String] ID of the account to close
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitAccountResponse, Integer, Hash)>] UnitAccountResponse data, response status code and response headers
    def reopen_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.reopen_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.reopen_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reopen'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.reopen_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#reopen_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace a Card
    # Replace a Card via API 
    # @param card_id [String] ID of the card to replace
    # @param replace_card_request [ReplaceCardRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UnitCardResponse]
    def replace_card(card_id, replace_card_request, opts = {})
      data, _status_code, _headers = replace_card_with_http_info(card_id, replace_card_request, opts)
      data
    end

    # Replace a Card
    # Replace a Card via API 
    # @param card_id [String] ID of the card to replace
    # @param replace_card_request [ReplaceCardRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCardResponse, Integer, Hash)>] UnitCardResponse data, response status code and response headers
    def replace_card_with_http_info(card_id, replace_card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.replace_card ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling UnitApi.replace_card"
      end
      # verify the required parameter 'replace_card_request' is set
      if @api_client.config.client_side_validation && replace_card_request.nil?
        fail ArgumentError, "Missing the required parameter 'replace_card_request' when calling UnitApi.replace_card"
      end
      # resource path
      local_var_path = '/cards/{cardId}/replace'.sub('{' + 'cardId' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(replace_card_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.replace_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#replace_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Report lost as stolen
    # Report lost as stolen via API 
    # @param card_id [String] ID of the card
    # @param [Hash] opts the optional parameters
    # @return [UnitCardResponse]
    def report_card_as_lost(card_id, opts = {})
      data, _status_code, _headers = report_card_as_lost_with_http_info(card_id, opts)
      data
    end

    # Report lost as stolen
    # Report lost as stolen via API 
    # @param card_id [String] ID of the card
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCardResponse, Integer, Hash)>] UnitCardResponse data, response status code and response headers
    def report_card_as_lost_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.report_card_as_lost ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling UnitApi.report_card_as_lost"
      end
      # resource path
      local_var_path = '/cards/{cardId}/report-lost'.sub('{' + 'cardId' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.report_card_as_lost",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#report_card_as_lost\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Report card as stolen
    # Report card as stolen via API 
    # @param card_id [String] ID of the card
    # @param [Hash] opts the optional parameters
    # @return [UnitCardResponse]
    def report_card_as_stolen(card_id, opts = {})
      data, _status_code, _headers = report_card_as_stolen_with_http_info(card_id, opts)
      data
    end

    # Report card as stolen
    # Report card as stolen via API 
    # @param card_id [String] ID of the card
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCardResponse, Integer, Hash)>] UnitCardResponse data, response status code and response headers
    def report_card_as_stolen_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.report_card_as_stolen ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling UnitApi.report_card_as_stolen"
      end
      # resource path
      local_var_path = '/cards/{cardId}/report-stolen'.sub('{' + 'cardId' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.report_card_as_stolen",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#report_card_as_stolen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reprocess Received Payment by Id
    # Reprocess a Received Payment via API 
    # @param payment_id [String] ID of the payment to advance
    # @param [Hash] opts the optional parameters
    # @return [UnitReceivedPaymentResponse]
    def reprocess_received_payment(payment_id, opts = {})
      data, _status_code, _headers = reprocess_received_payment_with_http_info(payment_id, opts)
      data
    end

    # Reprocess Received Payment by Id
    # Reprocess a Received Payment via API 
    # @param payment_id [String] ID of the payment to advance
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitReceivedPaymentResponse, Integer, Hash)>] UnitReceivedPaymentResponse data, response status code and response headers
    def reprocess_received_payment_with_http_info(payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.reprocess_received_payment ...'
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling UnitApi.reprocess_received_payment"
      end
      # resource path
      local_var_path = '/received-payments/{paymentId}/reprocess'.sub('{' + 'paymentId' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitReceivedPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.reprocess_received_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#reprocess_received_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Check Payment by Id
    # Return a Check Payment via API 
    # @param check_payment_id [String] ID of the check payment to return
    # @param return_check_payment_request [ReturnCheckPaymentRequest] Return Check Payment Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCheckPaymentResponse]
    def return_check_payment(check_payment_id, return_check_payment_request, opts = {})
      data, _status_code, _headers = return_check_payment_with_http_info(check_payment_id, return_check_payment_request, opts)
      data
    end

    # Return Check Payment by Id
    # Return a Check Payment via API 
    # @param check_payment_id [String] ID of the check payment to return
    # @param return_check_payment_request [ReturnCheckPaymentRequest] Return Check Payment Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCheckPaymentResponse, Integer, Hash)>] UnitCheckPaymentResponse data, response status code and response headers
    def return_check_payment_with_http_info(check_payment_id, return_check_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.return_check_payment ...'
      end
      # verify the required parameter 'check_payment_id' is set
      if @api_client.config.client_side_validation && check_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_payment_id' when calling UnitApi.return_check_payment"
      end
      # verify the required parameter 'return_check_payment_request' is set
      if @api_client.config.client_side_validation && return_check_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'return_check_payment_request' when calling UnitApi.return_check_payment"
      end
      # resource path
      local_var_path = '/check-payments/{checkPaymentId}/return'.sub('{' + 'checkPaymentId' + '}', CGI.escape(check_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(return_check_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCheckPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.return_check_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#return_check_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Received ACH Transaction
    # Return Received ACH Transaction via API 
    # @param transaction_id [String] ID of the transaction to return
    # @param return_received_ach_transaction_request [ReturnReceivedACHTransactionRequest] Pass empty object in order for content-type to be aquired correctly
    # @param [Hash] opts the optional parameters
    # @return [UnitReturnedReceivedAchTransactionResponse]
    def return_received_ach_transaction(transaction_id, return_received_ach_transaction_request, opts = {})
      data, _status_code, _headers = return_received_ach_transaction_with_http_info(transaction_id, return_received_ach_transaction_request, opts)
      data
    end

    # Return Received ACH Transaction
    # Return Received ACH Transaction via API 
    # @param transaction_id [String] ID of the transaction to return
    # @param return_received_ach_transaction_request [ReturnReceivedACHTransactionRequest] Pass empty object in order for content-type to be aquired correctly
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitReturnedReceivedAchTransactionResponse, Integer, Hash)>] UnitReturnedReceivedAchTransactionResponse data, response status code and response headers
    def return_received_ach_transaction_with_http_info(transaction_id, return_received_ach_transaction_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.return_received_ach_transaction ...'
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling UnitApi.return_received_ach_transaction"
      end
      # verify the required parameter 'return_received_ach_transaction_request' is set
      if @api_client.config.client_side_validation && return_received_ach_transaction_request.nil?
        fail ArgumentError, "Missing the required parameter 'return_received_ach_transaction_request' when calling UnitApi.return_received_ach_transaction"
      end
      # resource path
      local_var_path = '/returns/{transactionId}'.sub('{' + 'transactionId' + '}', CGI.escape(transaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(return_received_ach_transaction_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitReturnedReceivedAchTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.return_received_ach_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#return_received_ach_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reverse Fee
    # Reverse a Fee via API 
    # @param reverse_fee_request [ReverseFeeRequest] Reverse Fee Request
    # @param [Hash] opts the optional parameters
    # @return [UnitFeeReversalResponse]
    def reverse_fee(reverse_fee_request, opts = {})
      data, _status_code, _headers = reverse_fee_with_http_info(reverse_fee_request, opts)
      data
    end

    # Reverse Fee
    # Reverse a Fee via API 
    # @param reverse_fee_request [ReverseFeeRequest] Reverse Fee Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitFeeReversalResponse, Integer, Hash)>] UnitFeeReversalResponse data, response status code and response headers
    def reverse_fee_with_http_info(reverse_fee_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.reverse_fee ...'
      end
      # verify the required parameter 'reverse_fee_request' is set
      if @api_client.config.client_side_validation && reverse_fee_request.nil?
        fail ArgumentError, "Missing the required parameter 'reverse_fee_request' when calling UnitApi.reverse_fee"
      end
      # resource path
      local_var_path = '/fees/reverse'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(reverse_fee_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitFeeReversalResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.reverse_fee",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#reverse_fee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unfreeze Account by Id
    # Unfreeze an Account via API 
    # @param account_id [String] ID of the account to get
    # @param [Hash] opts the optional parameters
    # @return [UnitAccountResponse]
    def unfreeze_account(account_id, opts = {})
      data, _status_code, _headers = unfreeze_account_with_http_info(account_id, opts)
      data
    end

    # Unfreeze Account by Id
    # Unfreeze an Account via API 
    # @param account_id [String] ID of the account to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitAccountResponse, Integer, Hash)>] UnitAccountResponse data, response status code and response headers
    def unfreeze_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.unfreeze_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.unfreeze_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/unfreeze'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.unfreeze_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#unfreeze_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unfreeze a Card
    # Unfreeze a Card via API 
    # @param card_id [String] ID of the card to unfreeze
    # @param [Hash] opts the optional parameters
    # @return [UnitCardResponse]
    def unfreeze_card(card_id, opts = {})
      data, _status_code, _headers = unfreeze_card_with_http_info(card_id, opts)
      data
    end

    # Unfreeze a Card
    # Unfreeze a Card via API 
    # @param card_id [String] ID of the card to unfreeze
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCardResponse, Integer, Hash)>] UnitCardResponse data, response status code and response headers
    def unfreeze_card_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.unfreeze_card ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling UnitApi.unfreeze_card"
      end
      # resource path
      local_var_path = '/cards/{cardId}/unfreeze'.sub('{' + 'cardId' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.unfreeze_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#unfreeze_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Account
    # Update an Account via API 
    # @param account_id [String] ID of the account to update
    # @param update_account_request [UpdateAccountRequest] Update Account Request
    # @param [Hash] opts the optional parameters
    # @return [UnitAccountResponse]
    def update_account(account_id, update_account_request, opts = {})
      data, _status_code, _headers = update_account_with_http_info(account_id, update_account_request, opts)
      data
    end

    # Update Account
    # Update an Account via API 
    # @param account_id [String] ID of the account to update
    # @param update_account_request [UpdateAccountRequest] Update Account Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitAccountResponse, Integer, Hash)>] UnitAccountResponse data, response status code and response headers
    def update_account_with_http_info(account_id, update_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.update_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.update_account"
      end
      # verify the required parameter 'update_account_request' is set
      if @api_client.config.client_side_validation && update_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_account_request' when calling UnitApi.update_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json', 'application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.update_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#update_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Application
    # Update an Application via API 
    # @param application_id [String] ID of the application to update
    # @param update_application_request [UpdateApplicationRequest] Update Application Request
    # @param [Hash] opts the optional parameters
    # @return [UnitApplicationResponseWithIncluded]
    def update_application(application_id, update_application_request, opts = {})
      data, _status_code, _headers = update_application_with_http_info(application_id, update_application_request, opts)
      data
    end

    # Update Application
    # Update an Application via API 
    # @param application_id [String] ID of the application to update
    # @param update_application_request [UpdateApplicationRequest] Update Application Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitApplicationResponseWithIncluded, Integer, Hash)>] UnitApplicationResponseWithIncluded data, response status code and response headers
    def update_application_with_http_info(application_id, update_application_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.update_application ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling UnitApi.update_application"
      end
      # verify the required parameter 'update_application_request' is set
      if @api_client.config.client_side_validation && update_application_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_application_request' when calling UnitApi.update_application"
      end
      # resource path
      local_var_path = '/applications/{applicationId}'.sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_application_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitApplicationResponseWithIncluded'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.update_application",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#update_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Business Beneficial Owner via API
    # Update a Business Beneficial Owner
    # @param beneficial_owner_id [String] ID of the beneficial owner to update
    # @param update_business_beneficial_owner_request [UpdateBusinessBeneficialOwnerRequest] Update Business Beneficial Owner Request
    # @param [Hash] opts the optional parameters
    # @return [UnitBeneficialOwnerResponse]
    def update_business_beneficial_owner(beneficial_owner_id, update_business_beneficial_owner_request, opts = {})
      data, _status_code, _headers = update_business_beneficial_owner_with_http_info(beneficial_owner_id, update_business_beneficial_owner_request, opts)
      data
    end

    # Update a Business Beneficial Owner via API
    # Update a Business Beneficial Owner
    # @param beneficial_owner_id [String] ID of the beneficial owner to update
    # @param update_business_beneficial_owner_request [UpdateBusinessBeneficialOwnerRequest] Update Business Beneficial Owner Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitBeneficialOwnerResponse, Integer, Hash)>] UnitBeneficialOwnerResponse data, response status code and response headers
    def update_business_beneficial_owner_with_http_info(beneficial_owner_id, update_business_beneficial_owner_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.update_business_beneficial_owner ...'
      end
      # verify the required parameter 'beneficial_owner_id' is set
      if @api_client.config.client_side_validation && beneficial_owner_id.nil?
        fail ArgumentError, "Missing the required parameter 'beneficial_owner_id' when calling UnitApi.update_business_beneficial_owner"
      end
      # verify the required parameter 'update_business_beneficial_owner_request' is set
      if @api_client.config.client_side_validation && update_business_beneficial_owner_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_business_beneficial_owner_request' when calling UnitApi.update_business_beneficial_owner"
      end
      # resource path
      local_var_path = '/beneficial-owner/{beneficialOwnerId}'.sub('{' + 'beneficialOwnerId' + '}', CGI.escape(beneficial_owner_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_business_beneficial_owner_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitBeneficialOwnerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.update_business_beneficial_owner",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#update_business_beneficial_owner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Card
    # Update a Card via API 
    # @param card_id [String] ID of the card to update
    # @param update_card_request [UpdateCardRequest] Update Card Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCardResponse]
    def update_card(card_id, update_card_request, opts = {})
      data, _status_code, _headers = update_card_with_http_info(card_id, update_card_request, opts)
      data
    end

    # Update Card
    # Update a Card via API 
    # @param card_id [String] ID of the card to update
    # @param update_card_request [UpdateCardRequest] Update Card Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCardResponse, Integer, Hash)>] UnitCardResponse data, response status code and response headers
    def update_card_with_http_info(card_id, update_card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.update_card ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling UnitApi.update_card"
      end
      # verify the required parameter 'update_card_request' is set
      if @api_client.config.client_side_validation && update_card_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_card_request' when calling UnitApi.update_card"
      end
      # resource path
      local_var_path = '/cards/{cardId}'.sub('{' + 'cardId' + '}', CGI.escape(card_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_card_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCardResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.update_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#update_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Check Deposit
    # Update a Check Deposit via API 
    # @param check_deposit_id [String] ID of the check deposit to update
    # @param update_check_deposit_request [UpdateCheckDepositRequest] Update Check Deposit Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCheckDepositResponse]
    def update_check_deposit(check_deposit_id, update_check_deposit_request, opts = {})
      data, _status_code, _headers = update_check_deposit_with_http_info(check_deposit_id, update_check_deposit_request, opts)
      data
    end

    # Update Check Deposit
    # Update a Check Deposit via API 
    # @param check_deposit_id [String] ID of the check deposit to update
    # @param update_check_deposit_request [UpdateCheckDepositRequest] Update Check Deposit Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCheckDepositResponse, Integer, Hash)>] UnitCheckDepositResponse data, response status code and response headers
    def update_check_deposit_with_http_info(check_deposit_id, update_check_deposit_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.update_check_deposit ...'
      end
      # verify the required parameter 'check_deposit_id' is set
      if @api_client.config.client_side_validation && check_deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'check_deposit_id' when calling UnitApi.update_check_deposit"
      end
      # verify the required parameter 'update_check_deposit_request' is set
      if @api_client.config.client_side_validation && update_check_deposit_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_check_deposit_request' when calling UnitApi.update_check_deposit"
      end
      # resource path
      local_var_path = '/check-deposits/{checkDepositId}'.sub('{' + 'checkDepositId' + '}', CGI.escape(check_deposit_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_check_deposit_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCheckDepositResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.update_check_deposit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#update_check_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Counterparty
    # Update a Counterparty via API 
    # @param counterparty_id [String] ID of the counterparty to update
    # @param update_counterparty_request [UpdateCounterpartyRequest] Update Counterparty Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCounterpartyResponse]
    def update_counterparty(counterparty_id, update_counterparty_request, opts = {})
      data, _status_code, _headers = update_counterparty_with_http_info(counterparty_id, update_counterparty_request, opts)
      data
    end

    # Update Counterparty
    # Update a Counterparty via API 
    # @param counterparty_id [String] ID of the counterparty to update
    # @param update_counterparty_request [UpdateCounterpartyRequest] Update Counterparty Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCounterpartyResponse, Integer, Hash)>] UnitCounterpartyResponse data, response status code and response headers
    def update_counterparty_with_http_info(counterparty_id, update_counterparty_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.update_counterparty ...'
      end
      # verify the required parameter 'counterparty_id' is set
      if @api_client.config.client_side_validation && counterparty_id.nil?
        fail ArgumentError, "Missing the required parameter 'counterparty_id' when calling UnitApi.update_counterparty"
      end
      # verify the required parameter 'update_counterparty_request' is set
      if @api_client.config.client_side_validation && update_counterparty_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_counterparty_request' when calling UnitApi.update_counterparty"
      end
      # resource path
      local_var_path = '/counterparties/{counterpartyId}'.sub('{' + 'counterpartyId' + '}', CGI.escape(counterparty_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_counterparty_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCounterpartyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.update_counterparty",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#update_counterparty\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Customer
    # Update an Customer via API 
    # @param customer_id [String] ID of the customer to update
    # @param update_customer_request [UpdateCustomerRequest] Update Customer Request
    # @param [Hash] opts the optional parameters
    # @return [UnitCustomerResponse]
    def update_customer(customer_id, update_customer_request, opts = {})
      data, _status_code, _headers = update_customer_with_http_info(customer_id, update_customer_request, opts)
      data
    end

    # Update Customer
    # Update an Customer via API 
    # @param customer_id [String] ID of the customer to update
    # @param update_customer_request [UpdateCustomerRequest] Update Customer Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitCustomerResponse, Integer, Hash)>] UnitCustomerResponse data, response status code and response headers
    def update_customer_with_http_info(customer_id, update_customer_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.update_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling UnitApi.update_customer"
      end
      # verify the required parameter 'update_customer_request' is set
      if @api_client.config.client_side_validation && update_customer_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_customer_request' when calling UnitApi.update_customer"
      end
      # resource path
      local_var_path = '/customers/{customerId}'.sub('{' + 'customerId' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_customer_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitCustomerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.update_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#update_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Payment
    # Update an Payment via API 
    # @param payment_id [String] ID of the payment to update
    # @param update_payment_request [UpdatePaymentRequest] Update Payment Request
    # @param [Hash] opts the optional parameters
    # @return [UnitPaymentResponse]
    def update_payment(payment_id, update_payment_request, opts = {})
      data, _status_code, _headers = update_payment_with_http_info(payment_id, update_payment_request, opts)
      data
    end

    # Update Payment
    # Update an Payment via API 
    # @param payment_id [String] ID of the payment to update
    # @param update_payment_request [UpdatePaymentRequest] Update Payment Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitPaymentResponse, Integer, Hash)>] UnitPaymentResponse data, response status code and response headers
    def update_payment_with_http_info(payment_id, update_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.update_payment ...'
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling UnitApi.update_payment"
      end
      # verify the required parameter 'update_payment_request' is set
      if @api_client.config.client_side_validation && update_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_payment_request' when calling UnitApi.update_payment"
      end
      # resource path
      local_var_path = '/payments/{paymentId}'.sub('{' + 'paymentId' + '}', CGI.escape(payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.update_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#update_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a stop payment
    # @param stop_payment_id [String] ID of the stop payment
    # @param update_stop_payment_request [UpdateStopPaymentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [StopPaymentResponse]
    def update_stop_payment(stop_payment_id, update_stop_payment_request, opts = {})
      data, _status_code, _headers = update_stop_payment_with_http_info(stop_payment_id, update_stop_payment_request, opts)
      data
    end

    # Update a stop payment
    # @param stop_payment_id [String] ID of the stop payment
    # @param update_stop_payment_request [UpdateStopPaymentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StopPaymentResponse, Integer, Hash)>] StopPaymentResponse data, response status code and response headers
    def update_stop_payment_with_http_info(stop_payment_id, update_stop_payment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.update_stop_payment ...'
      end
      # verify the required parameter 'stop_payment_id' is set
      if @api_client.config.client_side_validation && stop_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'stop_payment_id' when calling UnitApi.update_stop_payment"
      end
      # verify the required parameter 'update_stop_payment_request' is set
      if @api_client.config.client_side_validation && update_stop_payment_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_stop_payment_request' when calling UnitApi.update_stop_payment"
      end
      # resource path
      local_var_path = '/stop-payments/{stopPaymentId}'.sub('{' + 'stopPaymentId' + '}', CGI.escape(stop_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_stop_payment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'StopPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.update_stop_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#update_stop_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Transaction
    # Update a Transaction via API 
    # @param account_id [String] ID of the account to update transaction from
    # @param transaction_id [String] ID of the transaction to update
    # @param update_transaction_request [UpdateTransactionRequest] Update Transaction Request
    # @param [Hash] opts the optional parameters
    # @return [UnitTransactionResponse]
    def update_transaction(account_id, transaction_id, update_transaction_request, opts = {})
      data, _status_code, _headers = update_transaction_with_http_info(account_id, transaction_id, update_transaction_request, opts)
      data
    end

    # Update Transaction
    # Update a Transaction via API 
    # @param account_id [String] ID of the account to update transaction from
    # @param transaction_id [String] ID of the transaction to update
    # @param update_transaction_request [UpdateTransactionRequest] Update Transaction Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitTransactionResponse, Integer, Hash)>] UnitTransactionResponse data, response status code and response headers
    def update_transaction_with_http_info(account_id, transaction_id, update_transaction_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.update_transaction ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling UnitApi.update_transaction"
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling UnitApi.update_transaction"
      end
      # verify the required parameter 'update_transaction_request' is set
      if @api_client.config.client_side_validation && update_transaction_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_transaction_request' when calling UnitApi.update_transaction"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/transactions/{transactionId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'transactionId' + '}', CGI.escape(transaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_transaction_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitTransactionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.update_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#update_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Webhook
    # Update a Webhook via API 
    # @param webhook_id [String] ID of the Webhook to update
    # @param update_webhook_request [UpdateWebhookRequest] Update Webhook Request
    # @param [Hash] opts the optional parameters
    # @return [UnitWebhookResponse]
    def update_webhook(webhook_id, update_webhook_request, opts = {})
      data, _status_code, _headers = update_webhook_with_http_info(webhook_id, update_webhook_request, opts)
      data
    end

    # Update Webhook
    # Update a Webhook via API 
    # @param webhook_id [String] ID of the Webhook to update
    # @param update_webhook_request [UpdateWebhookRequest] Update Webhook Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitWebhookResponse, Integer, Hash)>] UnitWebhookResponse data, response status code and response headers
    def update_webhook_with_http_info(webhook_id, update_webhook_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.update_webhook ...'
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling UnitApi.update_webhook"
      end
      # verify the required parameter 'update_webhook_request' is set
      if @api_client.config.client_side_validation && update_webhook_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_webhook_request' when calling UnitApi.update_webhook"
      end
      # resource path
      local_var_path = '/webhooks/{webhookId}'.sub('{' + 'webhookId' + '}', CGI.escape(webhook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/vnd.api+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_webhook_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitWebhookResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.update_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#update_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload an application document file. Supports PDF, PNG and JPG files
    # @param application_id [String] ID of the application to upload a file to
    # @param document_id [String] ID of the document to upload a file for
    # @param file [File] 
    # @param file_type [UploadApplicationDocumentContentType] 
    # @param [Hash] opts the optional parameters
    # @return [UnitDocumentResponse]
    def upload_application_document_file(application_id, document_id, file, file_type, opts = {})
      data, _status_code, _headers = upload_application_document_file_with_http_info(application_id, document_id, file, file_type, opts)
      data
    end

    # Upload an application document file. Supports PDF, PNG and JPG files
    # @param application_id [String] ID of the application to upload a file to
    # @param document_id [String] ID of the document to upload a file for
    # @param file [File] 
    # @param file_type [UploadApplicationDocumentContentType] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitDocumentResponse, Integer, Hash)>] UnitDocumentResponse data, response status code and response headers
    def upload_application_document_file_with_http_info(application_id, document_id, file, file_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.upload_application_document_file ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling UnitApi.upload_application_document_file"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling UnitApi.upload_application_document_file"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling UnitApi.upload_application_document_file"
      end
      # verify the required parameter 'file_type' is set
      if @api_client.config.client_side_validation && file_type.nil?
        fail ArgumentError, "Missing the required parameter 'file_type' when calling UnitApi.upload_application_document_file"
      end
      # resource path
      local_var_path = '/applications/{applicationId}/documents/{documentId}/multipart'.sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['fileType'] = file_type

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitDocumentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.upload_application_document_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#upload_application_document_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload an application document file - Back Side. Supports PDF, PNG and JPG files
    # Upload an application file via API - Back Side. Supports PDF, PNG and JPG files
    # @param application_id [String] ID of the application to upload a file to
    # @param document_id [String] ID of the document to upload a file for
    # @param file [File] 
    # @param file_type [UploadApplicationDocumentContentType] 
    # @param [Hash] opts the optional parameters
    # @return [UnitDocumentResponse]
    def upload_application_document_file_back_side(application_id, document_id, file, file_type, opts = {})
      data, _status_code, _headers = upload_application_document_file_back_side_with_http_info(application_id, document_id, file, file_type, opts)
      data
    end

    # Upload an application document file - Back Side. Supports PDF, PNG and JPG files
    # Upload an application file via API - Back Side. Supports PDF, PNG and JPG files
    # @param application_id [String] ID of the application to upload a file to
    # @param document_id [String] ID of the document to upload a file for
    # @param file [File] 
    # @param file_type [UploadApplicationDocumentContentType] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitDocumentResponse, Integer, Hash)>] UnitDocumentResponse data, response status code and response headers
    def upload_application_document_file_back_side_with_http_info(application_id, document_id, file, file_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.upload_application_document_file_back_side ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling UnitApi.upload_application_document_file_back_side"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling UnitApi.upload_application_document_file_back_side"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling UnitApi.upload_application_document_file_back_side"
      end
      # verify the required parameter 'file_type' is set
      if @api_client.config.client_side_validation && file_type.nil?
        fail ArgumentError, "Missing the required parameter 'file_type' when calling UnitApi.upload_application_document_file_back_side"
      end
      # resource path
      local_var_path = '/applications/{applicationId}/documents/{documentId}/back/multipart'.sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['fileType'] = file_type

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UnitDocumentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.upload_application_document_file_back_side",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#upload_application_document_file_back_side\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify a document
    # Verify a document via API 
    # @param application_id [String] ID of the application to verify a file for
    # @param document_id [String] ID of the document to verify
    # @param verify_document [VerifyDocument] Verify Document
    # @param [Hash] opts the optional parameters
    # @return [UnitDocumentResponse]
    def verify_application_document(application_id, document_id, verify_document, opts = {})
      data, _status_code, _headers = verify_application_document_with_http_info(application_id, document_id, verify_document, opts)
      data
    end

    # Verify a document
    # Verify a document via API 
    # @param application_id [String] ID of the application to verify a file for
    # @param document_id [String] ID of the document to verify
    # @param verify_document [VerifyDocument] Verify Document
    # @param [Hash] opts the optional parameters
    # @return [Array<(UnitDocumentResponse, Integer, Hash)>] UnitDocumentResponse data, response status code and response headers
    def verify_application_document_with_http_info(application_id, document_id, verify_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UnitApi.verify_application_document ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling UnitApi.verify_application_document"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling UnitApi.verify_application_document"
      end
      # verify the required parameter 'verify_document' is set
      if @api_client.config.client_side_validation && verify_document.nil?
        fail ArgumentError, "Missing the required parameter 'verify_document' when calling UnitApi.verify_application_document"
      end
      # resource path
      local_var_path = '/applications/{applicationId}/documents/{documentId}/verify'.sub('{' + 'applicationId' + '}', CGI.escape(application_id.to_s)).sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.api+json; charset=utf-8']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(verify_document)

      # return_type
      return_type = opts[:debug_return_type] || 'UnitDocumentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"UnitApi.verify_application_document",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UnitApi#verify_application_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
