=begin
#Unit OpenAPI specifications

#An OpenAPI specifications for unit-sdk clients

The version of the OpenAPI document: 0.0.2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  class TransactionRelationships
    attr_accessor :account

    attr_accessor :receiving_account

    attr_accessor :customer

    attr_accessor :customers

    attr_accessor :counterparty_account

    attr_accessor :counterparty_customer

    attr_accessor :related_transaction

    attr_accessor :disputed_transaction

    attr_accessor :authorization

    attr_accessor :returned

    attr_accessor :payment

    attr_accessor :check_payment

    attr_accessor :repayment

    attr_accessor :recurring_payment

    attr_accessor :org

    attr_accessor :card

    attr_accessor :incoming_ach

    attr_accessor :check_deposit

    attr_accessor :authorization_request

    attr_accessor :payment_advance_transaction

    attr_accessor :received_payment

    attr_accessor :chargeback

    attr_accessor :reward

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account' => :'account',
        :'receiving_account' => :'receivingAccount',
        :'customer' => :'customer',
        :'customers' => :'customers',
        :'counterparty_account' => :'counterpartyAccount',
        :'counterparty_customer' => :'counterpartyCustomer',
        :'related_transaction' => :'relatedTransaction',
        :'disputed_transaction' => :'disputedTransaction',
        :'authorization' => :'authorization',
        :'returned' => :'returned',
        :'payment' => :'payment',
        :'check_payment' => :'checkPayment',
        :'repayment' => :'repayment',
        :'recurring_payment' => :'recurringPayment',
        :'org' => :'org',
        :'card' => :'card',
        :'incoming_ach' => :'incomingAch',
        :'check_deposit' => :'checkDeposit',
        :'authorization_request' => :'authorizationRequest',
        :'payment_advance_transaction' => :'paymentAdvanceTransaction',
        :'received_payment' => :'receivedPayment',
        :'chargeback' => :'chargeback',
        :'reward' => :'reward'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'account' => :'AccountRelationship2',
        :'receiving_account' => :'ReceivingAccountRelationship',
        :'customer' => :'CustomerRelationship',
        :'customers' => :'CustomersRelationship',
        :'counterparty_account' => :'CounterpartyAccountRelationship1',
        :'counterparty_customer' => :'CounterpartyCustomerRelationship',
        :'related_transaction' => :'RelatedTransactionRelationship',
        :'disputed_transaction' => :'RelatedTransaction',
        :'authorization' => :'AuthorizationRelationship',
        :'returned' => :'ReturnedRelationship',
        :'payment' => :'PaymentRelationship',
        :'check_payment' => :'CheckPaymentRelationship',
        :'repayment' => :'RepaymentRelationship',
        :'recurring_payment' => :'RecurringPaymentRelationship',
        :'org' => :'OrgRelationship',
        :'card' => :'CardRelationship',
        :'incoming_ach' => :'IncomingAchRelationship',
        :'check_deposit' => :'CheckDepositRelationship',
        :'authorization_request' => :'AuthorizationRequestRelationship',
        :'payment_advance_transaction' => :'RelatedTransaction',
        :'received_payment' => :'ReceivedPaymentRelationship',
        :'chargeback' => :'ChargebackRelationship',
        :'reward' => :'RewardRelationship'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::TransactionRelationships` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::TransactionRelationships`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'account')
        self.account = attributes[:'account']
      else
        self.account = nil
      end

      if attributes.key?(:'receiving_account')
        self.receiving_account = attributes[:'receiving_account']
      end

      if attributes.key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.key?(:'customers')
        self.customers = attributes[:'customers']
      end

      if attributes.key?(:'counterparty_account')
        self.counterparty_account = attributes[:'counterparty_account']
      end

      if attributes.key?(:'counterparty_customer')
        self.counterparty_customer = attributes[:'counterparty_customer']
      end

      if attributes.key?(:'related_transaction')
        self.related_transaction = attributes[:'related_transaction']
      end

      if attributes.key?(:'disputed_transaction')
        self.disputed_transaction = attributes[:'disputed_transaction']
      end

      if attributes.key?(:'authorization')
        self.authorization = attributes[:'authorization']
      end

      if attributes.key?(:'returned')
        self.returned = attributes[:'returned']
      end

      if attributes.key?(:'payment')
        self.payment = attributes[:'payment']
      end

      if attributes.key?(:'check_payment')
        self.check_payment = attributes[:'check_payment']
      end

      if attributes.key?(:'repayment')
        self.repayment = attributes[:'repayment']
      end

      if attributes.key?(:'recurring_payment')
        self.recurring_payment = attributes[:'recurring_payment']
      end

      if attributes.key?(:'org')
        self.org = attributes[:'org']
      end

      if attributes.key?(:'card')
        self.card = attributes[:'card']
      end

      if attributes.key?(:'incoming_ach')
        self.incoming_ach = attributes[:'incoming_ach']
      end

      if attributes.key?(:'check_deposit')
        self.check_deposit = attributes[:'check_deposit']
      end

      if attributes.key?(:'authorization_request')
        self.authorization_request = attributes[:'authorization_request']
      end

      if attributes.key?(:'payment_advance_transaction')
        self.payment_advance_transaction = attributes[:'payment_advance_transaction']
      end

      if attributes.key?(:'received_payment')
        self.received_payment = attributes[:'received_payment']
      end

      if attributes.key?(:'chargeback')
        self.chargeback = attributes[:'chargeback']
      end

      if attributes.key?(:'reward')
        self.reward = attributes[:'reward']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @account.nil?
        invalid_properties.push('invalid value for "account", account cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @account.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account == o.account &&
          receiving_account == o.receiving_account &&
          customer == o.customer &&
          customers == o.customers &&
          counterparty_account == o.counterparty_account &&
          counterparty_customer == o.counterparty_customer &&
          related_transaction == o.related_transaction &&
          disputed_transaction == o.disputed_transaction &&
          authorization == o.authorization &&
          returned == o.returned &&
          payment == o.payment &&
          check_payment == o.check_payment &&
          repayment == o.repayment &&
          recurring_payment == o.recurring_payment &&
          org == o.org &&
          card == o.card &&
          incoming_ach == o.incoming_ach &&
          check_deposit == o.check_deposit &&
          authorization_request == o.authorization_request &&
          payment_advance_transaction == o.payment_advance_transaction &&
          received_payment == o.received_payment &&
          chargeback == o.chargeback &&
          reward == o.reward
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [account, receiving_account, customer, customers, counterparty_account, counterparty_customer, related_transaction, disputed_transaction, authorization, returned, payment, check_payment, repayment, recurring_payment, org, card, incoming_ach, check_deposit, authorization_request, payment_advance_transaction, received_payment, chargeback, reward].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
