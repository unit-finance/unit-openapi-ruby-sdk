=begin
#Unit OpenAPI specifications

#An OpenAPI specifications for unit-sdk clients

The version of the OpenAPI document: 0.0.2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a list of stop payments
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParametersObject] :page 
    # @option opts [ExecuteFilterParameter22] :filter 
    # @option opts [String] :sort 
    # @return [StopPaymentListResponse]
    def execute(opts = {})
      data, _status_code, _headers = execute_with_http_info(opts)
      data
    end

    # Get a list of stop payments
    # @param [Hash] opts the optional parameters
    # @option opts [ListPageParametersObject] :page 
    # @option opts [ExecuteFilterParameter22] :filter 
    # @option opts [String] :sort 
    # @return [Array<(StopPaymentListResponse, Integer, Hash)>] StopPaymentListResponse data, response status code and response headers
    def execute_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.execute ...'
      end
      # resource path
      local_var_path = '/stop-payments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StopPaymentListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.execute",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#execute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Stop Payment
    # @param create_stop_payment [CreateStopPayment] 
    # @param [Hash] opts the optional parameters
    # @return [StopPaymentResponse]
    def execute_0(create_stop_payment, opts = {})
      data, _status_code, _headers = execute_0_with_http_info(create_stop_payment, opts)
      data
    end

    # Create Stop Payment
    # @param create_stop_payment [CreateStopPayment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StopPaymentResponse, Integer, Hash)>] StopPaymentResponse data, response status code and response headers
    def execute_0_with_http_info(create_stop_payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.execute_0 ...'
      end
      # verify the required parameter 'create_stop_payment' is set
      if @api_client.config.client_side_validation && create_stop_payment.nil?
        fail ArgumentError, "Missing the required parameter 'create_stop_payment' when calling DefaultApi.execute_0"
      end
      # resource path
      local_var_path = '/stop-payments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_stop_payment)

      # return_type
      return_type = opts[:debug_return_type] || 'StopPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.execute_0",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#execute_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a specific stop payment
    # @param stop_payment_id [String] ID of the stop payment
    # @param [Hash] opts the optional parameters
    # @return [StopPaymentResponse]
    def execute_1(stop_payment_id, opts = {})
      data, _status_code, _headers = execute_1_with_http_info(stop_payment_id, opts)
      data
    end

    # Get details of a specific stop payment
    # @param stop_payment_id [String] ID of the stop payment
    # @param [Hash] opts the optional parameters
    # @return [Array<(StopPaymentResponse, Integer, Hash)>] StopPaymentResponse data, response status code and response headers
    def execute_1_with_http_info(stop_payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.execute_1 ...'
      end
      # verify the required parameter 'stop_payment_id' is set
      if @api_client.config.client_side_validation && stop_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'stop_payment_id' when calling DefaultApi.execute_1"
      end
      # resource path
      local_var_path = '/stop-payments/{stop_payment_id}'.sub('{' + 'stop_payment_id' + '}', CGI.escape(stop_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StopPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.execute_1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#execute_1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a stop payment
    # @param stop_payment_id [String] ID of the stop payment
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def execute_2(stop_payment_id, opts = {})
      execute_2_with_http_info(stop_payment_id, opts)
      nil
    end

    # Cancel a stop payment
    # @param stop_payment_id [String] ID of the stop payment
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def execute_2_with_http_info(stop_payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.execute_2 ...'
      end
      # verify the required parameter 'stop_payment_id' is set
      if @api_client.config.client_side_validation && stop_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'stop_payment_id' when calling DefaultApi.execute_2"
      end
      # resource path
      local_var_path = '/stop-payments/{stop_payment_id}'.sub('{' + 'stop_payment_id' + '}', CGI.escape(stop_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.execute_2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#execute_2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a stop payment
    # @param stop_payment_id [String] ID of the stop payment
    # @param [Hash] opts the optional parameters
    # @return [StopPaymentResponse]
    def execute_3(stop_payment_id, opts = {})
      data, _status_code, _headers = execute_3_with_http_info(stop_payment_id, opts)
      data
    end

    # Disable a stop payment
    # @param stop_payment_id [String] ID of the stop payment
    # @param [Hash] opts the optional parameters
    # @return [Array<(StopPaymentResponse, Integer, Hash)>] StopPaymentResponse data, response status code and response headers
    def execute_3_with_http_info(stop_payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.execute_3 ...'
      end
      # verify the required parameter 'stop_payment_id' is set
      if @api_client.config.client_side_validation && stop_payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'stop_payment_id' when calling DefaultApi.execute_3"
      end
      # resource path
      local_var_path = '/stop-payments/{stop_payment_id}/disable'.sub('{' + 'stop_payment_id' + '}', CGI.escape(stop_payment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StopPaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.execute_3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#execute_3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
