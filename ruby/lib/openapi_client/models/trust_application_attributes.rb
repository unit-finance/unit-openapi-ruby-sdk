=begin
#Unit OpenAPI specifications

#An OpenAPI specifications for unit-sdk clients

The version of the OpenAPI document: 0.0.2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  class TrustApplicationAttributes
    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :status

    attr_accessor :message

    attr_accessor :evaluation_outcome

    attr_accessor :evaluation_id

    attr_accessor :evaluation_entity_id

    attr_accessor :name

    attr_accessor :date_of_incorporation

    attr_accessor :state_of_incorporation

    attr_accessor :revocability

    attr_accessor :source_of_funds

    attr_accessor :tax_id

    attr_accessor :contact

    attr_accessor :trustees

    attr_accessor :grantor

    attr_accessor :ip

    attr_accessor :decision_method

    attr_accessor :decision_user_id

    attr_accessor :decision_reason

    attr_accessor :decision_date_time

    attr_accessor :tags

    attr_accessor :risk_rate

    attr_accessor :evaluation_flags

    attr_accessor :ip_location_details

    attr_accessor :phone_location_details

    attr_accessor :archived

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'status' => :'status',
        :'message' => :'message',
        :'evaluation_outcome' => :'evaluationOutcome',
        :'evaluation_id' => :'evaluationId',
        :'evaluation_entity_id' => :'evaluationEntityId',
        :'name' => :'name',
        :'date_of_incorporation' => :'dateOfIncorporation',
        :'state_of_incorporation' => :'stateOfIncorporation',
        :'revocability' => :'revocability',
        :'source_of_funds' => :'sourceOfFunds',
        :'tax_id' => :'taxId',
        :'contact' => :'contact',
        :'trustees' => :'trustees',
        :'grantor' => :'grantor',
        :'ip' => :'ip',
        :'decision_method' => :'decisionMethod',
        :'decision_user_id' => :'decisionUserId',
        :'decision_reason' => :'decisionReason',
        :'decision_date_time' => :'decisionDateTime',
        :'tags' => :'tags',
        :'risk_rate' => :'riskRate',
        :'evaluation_flags' => :'evaluationFlags',
        :'ip_location_details' => :'ipLocationDetails',
        :'phone_location_details' => :'phoneLocationDetails',
        :'archived' => :'archived'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'status' => :'ApplicationStatus',
        :'message' => :'String',
        :'evaluation_outcome' => :'String',
        :'evaluation_id' => :'String',
        :'evaluation_entity_id' => :'String',
        :'name' => :'String',
        :'date_of_incorporation' => :'Date',
        :'state_of_incorporation' => :'String',
        :'revocability' => :'Revocability',
        :'source_of_funds' => :'SourceOfFunds',
        :'tax_id' => :'String',
        :'contact' => :'TrustContact',
        :'trustees' => :'Array<Trustee>',
        :'grantor' => :'Grantor',
        :'ip' => :'String',
        :'decision_method' => :'String',
        :'decision_user_id' => :'String',
        :'decision_reason' => :'String',
        :'decision_date_time' => :'Time',
        :'tags' => :'Object',
        :'risk_rate' => :'String',
        :'evaluation_flags' => :'Array<String>',
        :'ip_location_details' => :'Object',
        :'phone_location_details' => :'Object',
        :'archived' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::TrustApplicationAttributes` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::TrustApplicationAttributes`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'evaluation_outcome')
        self.evaluation_outcome = attributes[:'evaluation_outcome']
      end

      if attributes.key?(:'evaluation_id')
        self.evaluation_id = attributes[:'evaluation_id']
      end

      if attributes.key?(:'evaluation_entity_id')
        self.evaluation_entity_id = attributes[:'evaluation_entity_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'date_of_incorporation')
        self.date_of_incorporation = attributes[:'date_of_incorporation']
      end

      if attributes.key?(:'state_of_incorporation')
        self.state_of_incorporation = attributes[:'state_of_incorporation']
      else
        self.state_of_incorporation = nil
      end

      if attributes.key?(:'revocability')
        self.revocability = attributes[:'revocability']
      end

      if attributes.key?(:'source_of_funds')
        self.source_of_funds = attributes[:'source_of_funds']
      end

      if attributes.key?(:'tax_id')
        self.tax_id = attributes[:'tax_id']
      end

      if attributes.key?(:'contact')
        self.contact = attributes[:'contact']
      else
        self.contact = nil
      end

      if attributes.key?(:'trustees')
        if (value = attributes[:'trustees']).is_a?(Array)
          self.trustees = value
        end
      end

      if attributes.key?(:'grantor')
        self.grantor = attributes[:'grantor']
      end

      if attributes.key?(:'ip')
        self.ip = attributes[:'ip']
      end

      if attributes.key?(:'decision_method')
        self.decision_method = attributes[:'decision_method']
      end

      if attributes.key?(:'decision_user_id')
        self.decision_user_id = attributes[:'decision_user_id']
      end

      if attributes.key?(:'decision_reason')
        self.decision_reason = attributes[:'decision_reason']
      end

      if attributes.key?(:'decision_date_time')
        self.decision_date_time = attributes[:'decision_date_time']
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.key?(:'risk_rate')
        self.risk_rate = attributes[:'risk_rate']
      end

      if attributes.key?(:'evaluation_flags')
        if (value = attributes[:'evaluation_flags']).is_a?(Array)
          self.evaluation_flags = value
        end
      end

      if attributes.key?(:'ip_location_details')
        self.ip_location_details = attributes[:'ip_location_details']
      end

      if attributes.key?(:'phone_location_details')
        self.phone_location_details = attributes[:'phone_location_details']
      end

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @state_of_incorporation.nil?
        invalid_properties.push('invalid value for "state_of_incorporation", state_of_incorporation cannot be nil.')
      end

      pattern = Regexp.new(/^((A[LKSZR])|(C[AOT])|(D[EC])|(F[ML])|(G[AU])|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EHDAINSOT])|(N[EVHJMYCD])|(MP)|(O[HKR])|(P[WAR])|(RI)|(S[CD])|(T[NX])|(UT)|(V[TIA])|(W[AVIY]))$/)
      if @state_of_incorporation !~ pattern
        invalid_properties.push("invalid value for \"state_of_incorporation\", must conform to the pattern #{pattern}.")
      end

      if @contact.nil?
        invalid_properties.push('invalid value for "contact", contact cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @created_at.nil?
      return false if @status.nil?
      return false if @name.nil?
      return false if @state_of_incorporation.nil?
      return false if @state_of_incorporation !~ Regexp.new(/^((A[LKSZR])|(C[AOT])|(D[EC])|(F[ML])|(G[AU])|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EHDAINSOT])|(N[EVHJMYCD])|(MP)|(O[HKR])|(P[WAR])|(RI)|(S[CD])|(T[NX])|(UT)|(V[TIA])|(W[AVIY]))$/)
      return false if @contact.nil?
      decision_method_validator = EnumAttributeValidator.new('String', ["Manually", "Automatically"])
      return false unless decision_method_validator.valid?(@decision_method)
      risk_rate_validator = EnumAttributeValidator.new('String', ["low", "medium", "high"])
      return false unless risk_rate_validator.valid?(@risk_rate)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] state_of_incorporation Value to be assigned
    def state_of_incorporation=(state_of_incorporation)
      if state_of_incorporation.nil?
        fail ArgumentError, 'state_of_incorporation cannot be nil'
      end

      pattern = Regexp.new(/^((A[LKSZR])|(C[AOT])|(D[EC])|(F[ML])|(G[AU])|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EHDAINSOT])|(N[EVHJMYCD])|(MP)|(O[HKR])|(P[WAR])|(RI)|(S[CD])|(T[NX])|(UT)|(V[TIA])|(W[AVIY]))$/)
      if state_of_incorporation !~ pattern
        fail ArgumentError, "invalid value for \"state_of_incorporation\", must conform to the pattern #{pattern}."
      end

      @state_of_incorporation = state_of_incorporation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] decision_method Object to be assigned
    def decision_method=(decision_method)
      validator = EnumAttributeValidator.new('String', ["Manually", "Automatically"])
      unless validator.valid?(decision_method)
        fail ArgumentError, "invalid value for \"decision_method\", must be one of #{validator.allowable_values}."
      end
      @decision_method = decision_method
    end

    # Custom attribute writer method with validation
    # @param [Object] tags Value to be assigned
    def tags=(tags)
      if tags.nil?
        fail ArgumentError, 'tags cannot be nil'
      end

      @tags = tags
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] risk_rate Object to be assigned
    def risk_rate=(risk_rate)
      validator = EnumAttributeValidator.new('String', ["low", "medium", "high"])
      unless validator.valid?(risk_rate)
        fail ArgumentError, "invalid value for \"risk_rate\", must be one of #{validator.allowable_values}."
      end
      @risk_rate = risk_rate
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          status == o.status &&
          message == o.message &&
          evaluation_outcome == o.evaluation_outcome &&
          evaluation_id == o.evaluation_id &&
          evaluation_entity_id == o.evaluation_entity_id &&
          name == o.name &&
          date_of_incorporation == o.date_of_incorporation &&
          state_of_incorporation == o.state_of_incorporation &&
          revocability == o.revocability &&
          source_of_funds == o.source_of_funds &&
          tax_id == o.tax_id &&
          contact == o.contact &&
          trustees == o.trustees &&
          grantor == o.grantor &&
          ip == o.ip &&
          decision_method == o.decision_method &&
          decision_user_id == o.decision_user_id &&
          decision_reason == o.decision_reason &&
          decision_date_time == o.decision_date_time &&
          tags == o.tags &&
          risk_rate == o.risk_rate &&
          evaluation_flags == o.evaluation_flags &&
          ip_location_details == o.ip_location_details &&
          phone_location_details == o.phone_location_details &&
          archived == o.archived
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [created_at, updated_at, status, message, evaluation_outcome, evaluation_id, evaluation_entity_id, name, date_of_incorporation, state_of_incorporation, revocability, source_of_funds, tax_id, contact, trustees, grantor, ip, decision_method, decision_user_id, decision_reason, decision_date_time, tags, risk_rate, evaluation_flags, ip_location_details, phone_location_details, archived].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
