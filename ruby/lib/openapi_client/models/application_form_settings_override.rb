=begin
#Unit OpenAPI specifications

#An OpenAPI specifications for unit-sdk clients

The version of the OpenAPI document: 0.0.2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module OpenapiClient
  class ApplicationFormSettingsOverride
    attr_accessor :redirect_url

    attr_accessor :privacy_policy_url

    attr_accessor :electronic_disclosures_url

    attr_accessor :deposit_terms_url

    attr_accessor :client_terms_url

    attr_accessor :cardholder_terms_url

    attr_accessor :cash_advanced_terms_url

    attr_accessor :debit_card_disclosure_url

    attr_accessor :additional_disclosures

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'redirect_url' => :'redirectUrl',
        :'privacy_policy_url' => :'privacyPolicyUrl',
        :'electronic_disclosures_url' => :'electronicDisclosuresUrl',
        :'deposit_terms_url' => :'depositTermsUrl',
        :'client_terms_url' => :'clientTermsUrl',
        :'cardholder_terms_url' => :'cardholderTermsUrl',
        :'cash_advanced_terms_url' => :'cashAdvancedTermsUrl',
        :'debit_card_disclosure_url' => :'debitCardDisclosureUrl',
        :'additional_disclosures' => :'additionalDisclosures'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'redirect_url' => :'String',
        :'privacy_policy_url' => :'String',
        :'electronic_disclosures_url' => :'String',
        :'deposit_terms_url' => :'String',
        :'client_terms_url' => :'String',
        :'cardholder_terms_url' => :'String',
        :'cash_advanced_terms_url' => :'String',
        :'debit_card_disclosure_url' => :'String',
        :'additional_disclosures' => :'Array<ApplicationFormAdditionalDisclosuresInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ApplicationFormSettingsOverride` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ApplicationFormSettingsOverride`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'redirect_url')
        self.redirect_url = attributes[:'redirect_url']
      end

      if attributes.key?(:'privacy_policy_url')
        self.privacy_policy_url = attributes[:'privacy_policy_url']
      end

      if attributes.key?(:'electronic_disclosures_url')
        self.electronic_disclosures_url = attributes[:'electronic_disclosures_url']
      end

      if attributes.key?(:'deposit_terms_url')
        self.deposit_terms_url = attributes[:'deposit_terms_url']
      end

      if attributes.key?(:'client_terms_url')
        self.client_terms_url = attributes[:'client_terms_url']
      end

      if attributes.key?(:'cardholder_terms_url')
        self.cardholder_terms_url = attributes[:'cardholder_terms_url']
      end

      if attributes.key?(:'cash_advanced_terms_url')
        self.cash_advanced_terms_url = attributes[:'cash_advanced_terms_url']
      end

      if attributes.key?(:'debit_card_disclosure_url')
        self.debit_card_disclosure_url = attributes[:'debit_card_disclosure_url']
      end

      if attributes.key?(:'additional_disclosures')
        if (value = attributes[:'additional_disclosures']).is_a?(Array)
          self.additional_disclosures = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if !@redirect_url.nil? && @redirect_url !~ pattern
        invalid_properties.push("invalid value for \"redirect_url\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if !@privacy_policy_url.nil? && @privacy_policy_url !~ pattern
        invalid_properties.push("invalid value for \"privacy_policy_url\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if !@electronic_disclosures_url.nil? && @electronic_disclosures_url !~ pattern
        invalid_properties.push("invalid value for \"electronic_disclosures_url\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if !@deposit_terms_url.nil? && @deposit_terms_url !~ pattern
        invalid_properties.push("invalid value for \"deposit_terms_url\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if !@client_terms_url.nil? && @client_terms_url !~ pattern
        invalid_properties.push("invalid value for \"client_terms_url\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if !@cardholder_terms_url.nil? && @cardholder_terms_url !~ pattern
        invalid_properties.push("invalid value for \"cardholder_terms_url\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if !@cash_advanced_terms_url.nil? && @cash_advanced_terms_url !~ pattern
        invalid_properties.push("invalid value for \"cash_advanced_terms_url\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if !@debit_card_disclosure_url.nil? && @debit_card_disclosure_url !~ pattern
        invalid_properties.push("invalid value for \"debit_card_disclosure_url\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@redirect_url.nil? && @redirect_url !~ Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      return false if !@privacy_policy_url.nil? && @privacy_policy_url !~ Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      return false if !@electronic_disclosures_url.nil? && @electronic_disclosures_url !~ Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      return false if !@deposit_terms_url.nil? && @deposit_terms_url !~ Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      return false if !@client_terms_url.nil? && @client_terms_url !~ Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      return false if !@cardholder_terms_url.nil? && @cardholder_terms_url !~ Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      return false if !@cash_advanced_terms_url.nil? && @cash_advanced_terms_url !~ Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      return false if !@debit_card_disclosure_url.nil? && @debit_card_disclosure_url !~ Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] redirect_url Value to be assigned
    def redirect_url=(redirect_url)
      if redirect_url.nil?
        fail ArgumentError, 'redirect_url cannot be nil'
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if redirect_url !~ pattern
        fail ArgumentError, "invalid value for \"redirect_url\", must conform to the pattern #{pattern}."
      end

      @redirect_url = redirect_url
    end

    # Custom attribute writer method with validation
    # @param [Object] privacy_policy_url Value to be assigned
    def privacy_policy_url=(privacy_policy_url)
      if privacy_policy_url.nil?
        fail ArgumentError, 'privacy_policy_url cannot be nil'
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if privacy_policy_url !~ pattern
        fail ArgumentError, "invalid value for \"privacy_policy_url\", must conform to the pattern #{pattern}."
      end

      @privacy_policy_url = privacy_policy_url
    end

    # Custom attribute writer method with validation
    # @param [Object] electronic_disclosures_url Value to be assigned
    def electronic_disclosures_url=(electronic_disclosures_url)
      if electronic_disclosures_url.nil?
        fail ArgumentError, 'electronic_disclosures_url cannot be nil'
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if electronic_disclosures_url !~ pattern
        fail ArgumentError, "invalid value for \"electronic_disclosures_url\", must conform to the pattern #{pattern}."
      end

      @electronic_disclosures_url = electronic_disclosures_url
    end

    # Custom attribute writer method with validation
    # @param [Object] deposit_terms_url Value to be assigned
    def deposit_terms_url=(deposit_terms_url)
      if deposit_terms_url.nil?
        fail ArgumentError, 'deposit_terms_url cannot be nil'
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if deposit_terms_url !~ pattern
        fail ArgumentError, "invalid value for \"deposit_terms_url\", must conform to the pattern #{pattern}."
      end

      @deposit_terms_url = deposit_terms_url
    end

    # Custom attribute writer method with validation
    # @param [Object] client_terms_url Value to be assigned
    def client_terms_url=(client_terms_url)
      if client_terms_url.nil?
        fail ArgumentError, 'client_terms_url cannot be nil'
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if client_terms_url !~ pattern
        fail ArgumentError, "invalid value for \"client_terms_url\", must conform to the pattern #{pattern}."
      end

      @client_terms_url = client_terms_url
    end

    # Custom attribute writer method with validation
    # @param [Object] cardholder_terms_url Value to be assigned
    def cardholder_terms_url=(cardholder_terms_url)
      if cardholder_terms_url.nil?
        fail ArgumentError, 'cardholder_terms_url cannot be nil'
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if cardholder_terms_url !~ pattern
        fail ArgumentError, "invalid value for \"cardholder_terms_url\", must conform to the pattern #{pattern}."
      end

      @cardholder_terms_url = cardholder_terms_url
    end

    # Custom attribute writer method with validation
    # @param [Object] cash_advanced_terms_url Value to be assigned
    def cash_advanced_terms_url=(cash_advanced_terms_url)
      if cash_advanced_terms_url.nil?
        fail ArgumentError, 'cash_advanced_terms_url cannot be nil'
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if cash_advanced_terms_url !~ pattern
        fail ArgumentError, "invalid value for \"cash_advanced_terms_url\", must conform to the pattern #{pattern}."
      end

      @cash_advanced_terms_url = cash_advanced_terms_url
    end

    # Custom attribute writer method with validation
    # @param [Object] debit_card_disclosure_url Value to be assigned
    def debit_card_disclosure_url=(debit_card_disclosure_url)
      if debit_card_disclosure_url.nil?
        fail ArgumentError, 'debit_card_disclosure_url cannot be nil'
      end

      pattern = Regexp.new(/(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)/)
      if debit_card_disclosure_url !~ pattern
        fail ArgumentError, "invalid value for \"debit_card_disclosure_url\", must conform to the pattern #{pattern}."
      end

      @debit_card_disclosure_url = debit_card_disclosure_url
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          redirect_url == o.redirect_url &&
          privacy_policy_url == o.privacy_policy_url &&
          electronic_disclosures_url == o.electronic_disclosures_url &&
          deposit_terms_url == o.deposit_terms_url &&
          client_terms_url == o.client_terms_url &&
          cardholder_terms_url == o.cardholder_terms_url &&
          cash_advanced_terms_url == o.cash_advanced_terms_url &&
          debit_card_disclosure_url == o.debit_card_disclosure_url &&
          additional_disclosures == o.additional_disclosures
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [redirect_url, privacy_policy_url, electronic_disclosures_url, deposit_terms_url, client_terms_url, cardholder_terms_url, cash_advanced_terms_url, debit_card_disclosure_url, additional_disclosures].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
